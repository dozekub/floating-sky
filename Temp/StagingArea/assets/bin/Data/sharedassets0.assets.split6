0d0d0d0d0d0d@®PьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`і`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь`f`f`f`f`f`f`f`Ф`”`’PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь@Ж0d0d0d0d0d0d@e`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPЏ`f`f`f`f`f`f`f`”`”PыPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPЏPЏPьPьPьPьPьPьPьPьPьPьPьPьPьPъ`”`Ф`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPЗ`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d@®PьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`і`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь`f`f`f`f`f`f`f`Ф`”`’PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь@Ж0d0d0d0d0d0d@e`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPЏ`f`f`f`f`f`f`f`”`”PыPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPЏPЏPьPьPьPьPьPьPьPьPьPьPьPьPьPъ`”`Ф`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPЗ`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d@®PьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`і`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь`f`f`f`f`f`f`f`Ф`”`’PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь@Ж0d0d0d0d0d0d@e`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPЏ`f`f`f`f`f`f`f`”`”PыPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPЏPЏPьPьPьPьPьPьPьPьPьPьPьPьPьPъ`”`Ф`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPЗ`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d@®PьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`і`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь`f`f`f`f`f`f`f`Ф`”`’PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь@Ж0d0d0d0d0d0d@e`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPЏ`f`f`f`f`f`f`f`”`”PыPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPЏPЏPьPьPьPьPьPьPьPьPьPьPьPьPьPъ`”`Ф`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPЗ`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d@®PьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`і`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь`f`f`f`f`f`f`f`Ф`”`’PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь@Ж0d0d0d0d0d0d@e`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPЏ`f`f`f`f`f`f`f`”`”PыPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPЏPЏPьPьPьPьPьPьPьPьPьPьPьPьPьPъ`”`Ф`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPЗ`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d@®PьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`і`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь`f`f`f`f`f`f`f`Ф`”`’PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь@Ж0d0d0d0d0d0d@e`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPЏ`f`f`f`f`f`f`f`”`”PыPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPЏPЏPьPьPьPьPьPьPьPьPьPьPьPьPьPъ`”`Ф`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPЗ`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f@d0d0d0d0d0d0d0d0d0d0d0d0d@®PьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`і`f`f`f`f`f`fP©PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь`f`f`f`f`f`f`f`Ф`”`’PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPь@Ж0d0d0d0d0d0d@e`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f " " " " " " " " " " " " " "А$†%†%†%†%†%@# " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "Р$†%†%†%†%†%0" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "@#†%†%†%†%†%А$ " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "p$†%†%†%†%†%P# " " " " " " " " " " " " " " " " " " " " " " " "А$†%†%†%†%†%@# " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "Р$†%†%†%†%†%0" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "@#†%†%†%†%†%А$ " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "p$†%†%†%†%†%P# " " " " " " " " " " " " " " " " " " " " " " " "А$†%†%†%†%†%@# " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "Р$†%†%†%†%†%0" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "@#†%†%†%†%†%А$ " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "p$†%†%†%†%†%P# " " " " " " " " " " " " " " " " " " " " " " " "А$†%†%†%†%†%@# " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "Р$†%†%†%†%†%0" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "@#†%†%†%†%†%А$ " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "p$†%†%†%†%†%P# " " " " " " " " " " " " " " " " " " " " " " " "А$†%†%†%†%†%@# " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "Р$†%†%†%†%†%0" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "@#†%†%†%†%†%А$ " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "p$†%†%†%†%†%P# " " " " " " " " " " " " " " " " " " " " " " " "А$†%†%†%†%†%@# " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "Р$†%†%†%†%†%0" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "@#†%†%†%†%†%А$ " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "p$†%†%†%†%†%P# " " " " " " " " " " " " " " " " " " " " " " " "А$†%†%†%†%†%@# " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "Р$†%†%†%†%†%0" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "@#†%†%†%†%†%А$ " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "p$†%†%†%†%†%P# " " " " " " " " " " " " " " " " " " " " " " " "А$†%†%†%†%†%G#"" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "Р$†%†%†%†%†%7#"" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "@#†%†%†%†%†%Г$&" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "p$†%†%†%†%†%U#$" " " " " " " " " " " " " " " " " " " "'"5#@#@#Р$†%†%†%†%¶%g$)")" " " " " " " " " " " " " " " " " " " " " " " " " " "("D#P#P#Р%†%†%†%†%І%f#)"(" " " " " " " " " " " " " " " " " " " " " " " " " "!"*"P#P#`$†%†%†%†%†%Ь%D#+"#" " " " " " " " " " " " " " " " " " " " " " " " " " " " "$"8"@#@#А$†%†%†%†%£%Й$'"," " " " " " " " " " " " " " " " "!","7#®%†%†%†%†%†%†%Ґ%Я%§%@# " " " " " " " " " " " " " " " " " " " " " " " " """-"F#®%†%†%†%†%†%†%£%Я%Ґ%0# " " " " " " " " " " " " " " " " " " " " " " " " "&"-"h$Ґ%†%†%†%†%†%†%®%Э%А$ " " " " " " " " " " " " " " " " " " " " " " " " " " " " "*")"Ш%†%†%†%†%†%†%†%≠%Ч%P# " " " " " " " " " " " " " " " " """""А$ѓ%£%†%†%†%†%¶%ѓ%Я%Ґ%Р$ " " " " " " " " " " " " " " " " " " " " " " " " "#"!"С$Ѓ%Ґ%†%†%†%†%І%ѓ%Я%†%А$ " " " " " " " " " " " " " " " " " " " " " " " " "$"@#І%Ђ%†%†%†%†%°%Ђ%ѓ%Ы%†%P# " " " " " " " " " " " " " " " " " " " " " " " " " " "!"#"`$ђ%¶%†%†%†%†%§%Ѓ%ѓ%•%Р%0" " " " " " " " " " " " " " " " " "P#°%ѓ%ѓ%Ѓ%Ю%Ѓ%ѓ%Я%ѓ%ѓ%јyјy†xРwРwРwРwРwРwРwРwРwРwРw@D " " " " " " " " " " " " "`#Ґ%ѓ%ѓ%Ѓ%Ю%Ѓ%ѓ%Я%ѓ%ѓ%∞W∞WРVАVАVАVАVАVАVАVАVАVАVАV 2 " " " " " " " " " " " " "Р$®%ѓ%ѓ%Ю%Ю%Ѓ%Я%Я%ѓ%©6∞G∞WАVАVАVАVАVАVАVАVАVАVАVАVPЧ0T " " " " " " " " " " " " " "@#†%Ѓ%ѓ%Ѓ%Ю%Ѓ%ѓ%Я%ѓ%ѓ%іF∞F†FpEpEpEpEpEpEpEpE " " " " " " " "03р€р€юопЁпЌяћпЉяЉњ™њ™ѓ™°™†™†™†™†™†™†™†™†™†™†™†™†™†™АИ " " " " " " " " " " " "@Dр€с€€опЁпЌяЉпћяЉњ™њ™ѓ™∞ї∞ї∞ї∞ї∞ї∞ї∞ї∞ї∞ї∞ї∞ї∞ї∞ї∞ЋPџ C " " " " " " " " " " "АИр€х€пёпЌпћяЉпЉѕїњ™ѓ™Їїјћјћјћјћјћјћјћјћјћјћјћјћјћ†№PьPм0T " " " " " " " " " " " " "–Ёр€ыопЁпЌяћпЉяЉњЂњ™ѓ™§™†™†™†™†™†™†™†™†™†™†™ " " " " " " " "pw–Ё–Ё‘нпопопопояЁяЁпояЁбоаоаоаюаюаюаюаюаюаюаюаюаюаюаюPU " " " " " " " " " " "АИ–Ё–Ё’ЁпопопояояЁянпояЁаоаоаоаюаюаюаюаюаюаюаюаюаюРэPьPл C " " " " " " " " " "АИР©Р©ЋЁпопопояняЁяопоЏЁаоаоаоаоаоаоаоаоаоаоаоаоао`ьPьPьPм0T " " " " " " " " " " "0DР™Р™°™попопопояЁяЁпояодоаоаоаоаоаоаоаоаоаоао†™†™†™†™†™†™†™†™†™†™†™†™™Їѕћпопопопюп€побоао–нјэјэјэјэјэјэјэјэјэјэјэјэ∞э`ь`ьРЋ†™†™†™†™†™†™†™†™†™†™†™†™Ђїѕћпопопопюп€поаоаојнјэјэјэјэјэјэјэјэјэјэАьPьPь`ь†™†™†™†™†™†™†™†™†™†™†ї†ї†ї°ЇњїяЁпопопоп€пюкоаоаојэјэјэјэјэјэјэјэјэјэјэPьPьPьPьPьPьPьpЋР©Р©Р©Р©Р©Р©Р©Р©†™†ї†ї†їІЇѕћяЁпопопоп€подоао–нјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэ†™°™ѓ™ѕћпопопопоян∞їаюјэјэјэјэјэјэјэјэјэјэјэјэјэ†эPьPьРэјэјэјэјэјэјэјэјэјэјэјмАЩУЩѓЇѕћпопопопояЁ–ЁаюјэјэјэјэјэјэјэјэјэјэјэАьPьPьPь∞эјэјэјэјэјэјэјэјэјэјэјэ∞Ћ†™®™њїяЁпопопопоўЁ–Ё–эјэјэјэјэјэјэјэјэјэјэјэPьPьPьPьPьPьPьpьјэјэјэјэјэјэјэјэјэјэ–э†™†™Ѓ™њћяЁпопопопо√ћаојэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэ–эаоїїѓ™Я™Я©Я™Я™НЩ∞ївю¬эЅэјэјэјэјэјэјэјэјэјэјэјэ†эPьPьРэјэјэјэјэјэјэјэјэјэјэјэ–юјћђ™ѓ™Я™Я©Я™Я™ЛИ∞ћвю√эјэјэјэјэјэјэјэјэјэјэАьPьPьPь∞эјэјэјэјэјэјэјэјэјэјэјэјэаюТЩѓ™ѓ™Я™Я™Я™ЯЩЖИт€јэ√эјэјэјэјэјэјэјэјэјэјэPьPьPьPьPьPьPьpьјэјэјэјэјэјэјэјэјэјэјэјэ–Ё®™ѓ™Я™Я©Я™Я™ЯЩРЩв€Ѕэ¬эјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэƒэ»э≈эы€ко€€ПЛЛ€€€€€€€€яюЌэ…эјэјэјэјэјэјэјэјэјэјэјэРэPьPьРэјэјэјэјэјэјэјэјэјэ≈э»э≈эы€коппПЛПЛ€€€€€€€€яэЌэ»эјэјэјэјэјэјэјэјэјэPьPьPьPь∞эјэјэјэјэјэјэјэјэјэјэ»э«эзющ€ооѕЌПЫѓ≠€€€€ю€€€ѕэЌэ√эјэјэјэјэјэјэјэјэ†эPьPьPьPьPьPьPьpьјэјэјэјэјэјэјэјэјэ¬э…э∆эщ€йопюЯЬПЛяё€€€€ю€пюЌэћэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэјэќэ»эѕэ€€€€ѓ≠њмњмЛ€€€€х€аюјэ…э¬эјэјэјэјэјэјэјэјэјэјэpьPьPьpьјэјэјэјэјэјэјэјэјэѕэ»эѕэ€€€€ѓђњмњмПЛ€€€€ф€аюјэ эЅэјэјэјэјэјэјэјэ†эPьPьPьPь†эјэјэјэјэјэјэјэјэјэ≈эћэЋэпю€€€€ПЂњмЯїњљ€€ь€т€–юјэЋэјэјэјэјэјэјэјэјэpьPьPьPьPьPьPьPьPь∞эјэјэјэјэјэјэјэјэЋэ…эќэ€€€€ѕќѓ№њмЛ€€€€ш€б€јэ∆э≈эјэјэјэјэјэјэјэјэјэјэјэјэјэјэ∆э»эјэ–юр€’эѕэѕэѕэѕэѕэƒэ–юаю†Ї∞№ эјэјэјэјэјэјэјэјэјэјэ`ьPьPьPь∞эјэјэјэјэјэјэјэ»э∆эјэ–юр€∆эѕэѕэѕэѕэѕэ√эаюаю†Ї∞м…эјэјэјэјэјэјэјэ`ьPьPьPьPьАьјэјэјэјэјэјэјэјэјэЌэЅэјэа€аюћэѕэѕэѕэѕэћэјэр€–юјэ∆эƒэјэјэјэјэјэјэ∞эPьPьPьPьPьPьPьPьPь†эјэјэјэјэјэјэјэ√эЋэјэ–эр€“эѕэѕэѕэѕэѕэ«э–юр€јэјэ эјэјэјэјэјэјэјэјэјэјэјэјэјэјэћэјэјэјэ∆эѕэњэѓьѕэѕэѕэњм»м∞м`fwЗѕмґџ†џ†џАлАлАлАлАлАлАлPьPьPьPь†эјэјэјэјэјэјэјэЋэјэјэјэ»эѕэњэѓьѕэѕэѕэњм∆э∞м`fИИњм§џ†џ†џ†џ†џ†џРлPьPьPьPьPьPЏ`f`f`f`f`f`f`f`f∆э∆эјэјэјэЌэѕэѓьњэѕэѕэѕэњ№ЅэР©cf™ Њм†џ†џ†џ†џ†џ†џpмPьPьPьPьPьPьPьPьPьpьјэјэјэјэјэјэјэЋэјэјэјэ√эѕэѕэЯьѕэѕэѕэѕэїмјэ`wefЊмєџ†џ†џpмPьPьјэјэјэјэјэјэјэѓ ЬЇ`fАє∞мѕэѕэњкяэпюѕэѕэѕэ®•лpЗДШѕм© † pлPьPьPьPьPьPьPьPьPьPьPьРэјэјэјэјэјэјэѓ їџ†џ†л±ьѕэѕэњкяюяюѕэѕэѕэ®£л`vДШњмЈмјэјэјэјэ†кPьPьPьPьPьPьPЏ`f`f`f`f`f`f`fyИњміџ∞џ†л«эѕэѕьѕлп€ѕэѕэѕэЯ ЮЏР cf¶ЇњџҐ † † † † pЎPьPьPьPьPьPьPьPьPьPьpьјэјэјэјэјэјэђЋѓџ`fАШ∞ьћэѕэњлѕэпюѕэѕэѕэПє®џА®dfЋэђ † Р PьPьPьPьPьPьPьPьPШ`f¶џђЇ†Ї†џІляэяЁяюпюп€ѕэѕэѕн?d<d0dpЗАШcfPЏPьPьPьPьPьPьPьPьPьPьPьPьPьPє`f`f`f`f`f®ЇЬєАИРЏємяюяЁяэп€пюѕэѕэњм?d;d@dpЗБИcf`f`f`f`Е`‘PьPьPьPьPьPьPьPьPьPьPьPьP `fАШљ№§ † †лЊмпюѕЁѕэ€€яюѕэѕэПє?d5d@eРЇdf`f`f`f`f`іPжPьPьPьPьPьPьPьPьPьPьPьPџ`f`f`f`f`fДШѓ `vАє§лѕэпояняю€€ѕэѕэѕэ_u?d0dPfРЇdfPЧPьPьPьPьPьPьPьPьPьPьP `fdfPe0d{®ѕэѕэњмњмѕэѕнѕэП®?d?d2dPџP¶duYи^ьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`Ф`f`f`fpwdfPf0dМ®ѕэѕэњмѕмѕэѕнѕэ®?d?d1d@d`fdf`f`f`f`√`‘PьPьPьPьPьPьPьPьPьPьPьPьPьPй`fdf`f@d1dњмѕэѕнњмѕэѕэѕнѕэOd?d;d0dPecf`f`f`f`Е`”PжPьPьPьPьPьPьPьPьPьPьPьPьPъ`і`f`f`f`fdf`f@dWЖѕэѕэѕмњмѕэѕэѕэЯ ?d?d6d@ЄPўdfSЈXьUьPьPьPьPьPьPьTь[ьSиdf`vPШ0d}ЧЯ ?d?d?d?d?d?d?d?d?dI®^ь_жo”_з^ьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`”`u`f`f`fdfPe0d~®ЯЇ?d?d?d?d?d?d?d?d?d3d@d`fdf`f`f`§`”`‘PьPьPьPьPьPьPьPьPьPьPьPь^ьUиbЕbfPШ@Ж4dѓџoЧ?d?d?d?d?d?d?d?d=d0dPeafbf`f`f`√`”PжPьPьPьPьPьPьPьPьPьPьPьPьPъ`”`Ф`f`f`fdf`f0dZvѓџOe?d?d?d?d?d?d?d?d8uWь^йo”o‘_ьUьPьPьPьPьPьPьVь_ьo”m”XйQь@Ч<d?d?d?d?d?d?d?d?d?d?dDЖ\ь_кo”o÷^ьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`”`і`f`fbfafPe0d=d?d?d?d?d?d?d?d?d?d?d2d0d`fdf`f`Е`”`”`‘PьPьPьPьPьPьPьPьPьPьPьQь_ьo÷o”k÷QьPл3d?d?d?d?d?d?d?d?d?d?d=d0d@e`fdf`f`§`”`”PжPьPьPьPьPьPьPьPьPьPьPьPьPъ`”`”`e`f`fdfPf0d8d?d?d?d?d?d?d?d?d?d?d7dWь_ьo”o”_ыTьPьPьPьPьPьPьXь_йo”o’_ьXь@є7d?d?d?dOe_vOeOd?d?d>d0uSь_ьo‘o‘^ьPьPьPьPьPьPьPьPьPьPьPьPьPь`‘`”`”`Ф`fdf`fPe0d8d?d?d?dOu_vOe?d?d?d=d0d@Д`edf`f`√`”a”e‘SьQьTьWьPьPьPьPьPьPьPьTь_ьo”o”_ы]ьPь0d=d?d?dOd_u_uOd?d?d?d7d0dPФ`fdf`Е`”`”a”VзRьRьXьRьPьPьPьPьPьPьPьPьPъ`”`”`і`fafbf`f0d3d?d?d?dOe_vOuOd?d?d?d2dPл^ь_зo”_ъTьPьPьPьPьPьPь[ь_жo”_к[ьPь@®0d<d?d?d?d?d?d_voЗ=d1d@ЖPьZь_зo”^ьPьPьPьPьPьPьPьPьPьPьYьRьQьc’a”`”`”`edf`fPЕ0t0d=d?d?d?d?d?d_ЖoЗ=d@Ф`”`”`”dЕc§h”o”o”o’_ь_ь_ьPьPьPьPьPьPьPьPьVь_йo”_з_ьQьPл0d4d?d?d?d?d?dOdoЗ_v8dP£`”`”a√euc”l”o”o”_и_ь_ьYьPьPьPьPьPьPьXьRьQьSъa”`”`”`Еdf`f`e@Д0d9d?d?d?d?d?dOuoЗNe3d0dPьUь_кo”_йSьPьPьPьPьPьPь]ьo‘_ж^ьPьPь@®0d0d9d=d?d?d?d<d0d0d0d@ЄPьQь_ъo”]ыPьPьPьPьPьPьPьPьPьPьXь_ь_ь_йo”l”c”a§de`і`”`”P√0d:d=d?d?d?d;d@ЖWџo’o”o”o”o”o”o”o”o”_з_ь_ьVьPьPьPьPьPьPьPьPьYь_жo‘_ьTьPьPь0d0d1d=d>d?d?d?d6uAЧ[ыo”o”o”o”o”o”o”o”o”_ъ_ь_ьQьPьPьPьPьPьPьSь_ь_ь_ыo”n”d”b√de`Ф`”`”`”@t6d=d?d?d?d>d1d0d0d@ЖPьPь]ьo‘_иSьPьPьPьPьPьPь_йo”_ыRьPьPь@Ч0d0d0d0d0d1d0d0d0d0d0dPЏPьPьXьo’]кPьPьPьPьPьPьPьPьPьPьPь_ь_ь_ъo”o”o”o”o”n”h”e”d”R≈0u0u0d1dAЧ^ь_ь_ь_ыo”o”o”o”o”o”o”o”_й_ь\ьPьPьPьPьPьPьPьPьPь[ьo”_иWьPьPьPл0d0d0d0d0d0d1dUЏ_ь_ь_ь_иo”o”o”o”o”o”o”o”_ь_ьVьPьPьPьPьPьPьPьPь[ь_ь_ьo‘o”o”o”o”o”j”e”d”c’@Ц0u0d1d0d0d0d0d0d@ЄPьPьTь_з_зSьPьPьPьPьPьRь_з_зUьPьPьPь@Є0d0d0d0d0d0d0d0d0d0d0dPьPьPьPь_и]иPьPьPьPьPьPьPьPьPьPьPьWь_ь_ьo”o”o”o”o”o”o”o”o’_ьWьSьRьPЏ@®Pь]ь_ь_ь_иo”o”o”o”o”o”o”_ы^ьQьPьPьPьPьPьPьPьPьPь]йo’ZьPьPьPьPь0d0d0d0d0d0d0dPЏTь_ь_ь_ьo’o”o”o”o”o”o”o÷_ьZьPьPьPьPьPьPьPьPьPьRь_ь_ь_жo”o”o”o”o”o”o”o”_ы[ьSьSьPл@Е0d0d0d0dP PьPьPь[ъo÷RьPьPьPьPьPьUьo’XьPьPьPьPь@…0d0d0d0d0d0d0d0d0d0d@ЖPьPьPьPьWы]зPьPьPьPьPьPьPьPьPьPьPьPь[ь_ьoжo”o”o”o”o”o”o”_ы_ь_ь]ьQьPьPЏPьPь[ь_ь_ьoжo”o”o”o”o”_жZьPьPьPьPьPьPьPьPьPьPьPь_ж]кPьPьPьPьPь0u0d0d0d0d0d0dPЏPьRь^ь_ь_ыo‘o”o”o”o”o”^йVьPьPьPьPьPьPьPьPьPьPьPьWь_ь_иo”o”o”o”o”o”o”_и_ь_ь_ьTьPь@є0d0d0d0dPьPьPьPьSь_жRьPьPьPьPьPьWк[йPьPьPьPьPьPЏ0d0d0d0d0d0d0d0d0d0d@ІPьPьPьPьPьYЎPЏPЏPЏPЏPЏPЏPлPьPьPьPьPьPьYь_йo”o”o”o”o”o”_и_ь_ь[ьPьPьPьPЏPьPьPьSь[ь]ьnжo”o”m”h‘PьPьPьPьPьPьPьPьPьPьPьPьRь^зQьPьPьPьPьPь@Ж0d0d0d0d0d0dPЏPьPьPьWь\ь^ыn‘o”n”l”TзPьPьPьPьPьPьPьPьPьPьPьPьPьPьVь^ыo‘o”o”o”o”o”o÷_ь_ь]ьRьPьPь@є0d0d0d0uPьPьPьPьPьYиQлPлPлPєPєPєVІPмPмPмPмPмPмPџ0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`fdf`f`f`f`f`f`f`fPмPьPьPьPьPьPьQьj’o”o”o”o”_з_ь^ьVьPьPьPьPьPЏPьPьPьPьPьPьPы`”bЕaЕ`ƒPьPьPьPьPьPьP PєPєPєPєPєT®SкPьPьPьPьPьPь@Ц0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`√de`§P„PьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьWиn”o”o”o”o’_ь_ьYьPьPьPьPь@є0d0d0d@e`f`f`f`f`fbfaf`f`f`f`f`fcf`f`f`f`f`f`f`f0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`fPЏPьPьPьPьPьPьPьP÷aФd§e”UыTьQьPьPьPьPьPьPьPЏPьPьPьPьPьPьPы`і`f`f`fPЏPьPьPьPьPџ`f`f`f`f`f`fcf`f`f`f`f`f`f`f@e0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`Е`f`fPЗPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьPй`§eЕe”UиUьRьPьPьPьPьPьPь@є0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`fPЏPьPьPьPьPьPьPє`fbf`e`”PыPьPьPьPьPьPьPьPьPЏPьPьPьPьPьPьPы`і`f`f`fPЏPьPьPьPьP `f`f`f`f`f`f`f`f`f`f`f`f`f`fPe0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`Е`f`fPЗPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьP `f`fbf`іPйPьPьPьPьPьPьPьPь@є0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`fPЏPьPьPьPьPьPьPШ`f`f`f`”PыPьPьPьPьPьPьPьPьPЏPьPьPьPьPьPьPы`і`f`f`fPЏPьPьPьPьP `f`f`f`f`f`f`f`f`f`f`f`f`f`fPe0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`Е`f`fPЗPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьP©`f`f`f`іPйPьPьPьPьPьPьPьPь@є0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`fPЏPьPьPьPьPьPьPШ`f`f`f`”PыPьPьPьPьPьPьPьPьPЏPьPьPьPьPьPьPы`і`f`f`fPЏPьPьPьPьP `f`f`f`f`f`f`f`f`f`f`f`f`f`fPe0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`Е`f`fPЗPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьP©`f`f`f`іPйPьPьPьPьPьPьPьPь@є0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`fPЏPьPьPьPьPьPьPШ`f`f`f`”PыPьPьPьPьPьPьPьPьPЏPьPьPьPьPьPьPы`і`f`f`fPЏPьPьPьPьP `f`f`f`f`f`f`f`f`f`f`f`f`f`fPe0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`Е`f`fPЗPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьP©`f`f`f`іPйPьPьPьPьPьPьPьPь@є0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`fPЏPьPьPьPьPьPьPШ`f`f`f`”PыPьPьPьPьPьPьPьPьPЏPьPьPьPьPьPьPы`і`f`f`fPЏPьPьPьPьP `f`f`f`f`f`f`f`f`f`f`f`f`f`fPe0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`Е`f`fPЗPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьP©`f`f`f`іPйPьPьPьPьPьPьPьPь@є0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`fPЏPьPьPьPьPьPьPШ`f`f`f`”PыPьPьPьPьPьPьPьPьPЏPьPьPьPьPьPьPы`і`f`f`fPЏPьPьPьPьP `f`f`f`f`f`f`f`f`f`f`f`f`f`fPe0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`Е`f`fPЗPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьP©`f`f`f`іPйPьPьPьPьPьPьPьPь@є0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`fPЏPьPьPьPьPьPьPШ`f`f`f`”PыPьPьPьPьPьPьPьPьPЏPьPьPьPьPьPьPы`і`f`f`fPЏPьPьPьPьP `f`f`f`f`f`f`f`f`f`f`f`f`f`fPe0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`Е`f`fPЗPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьP©`f`f`f`іPйPьPьPьPьPьPьPьPь@є0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f`f0d0d0d0d0d0d0d0d0d0dPe`f`f`f`f`f`f`f`f`f`f`f`f`fPЏPьPьPьPьPьPьPШ`f`f`f`”PыPьPьPьPьPьPьPьPьPЏPьPьPьPьPьPьPы`і`f`f`fPЏPьPьPьPьP `f`f`f`f`f`f`f`f`f`f`f`f`f`fPe0d0d0d0d0d0dPЏPьPьPьPьPьPьPи`Е`f`fPЗPьPьPьPьPьPьPьPьPьPьPьPьPьPьPьP©`f`f`f`іPйPьPьPьPьPьPьPьPь@є0d0d0dPe`f`f`f`f`f`f`f`f`f " " " " " " "Р$†%†%0" " " " " " " " " " " " " " " "P#†%†%`$ " " " " " " " " " " " " " " "0"†%†%Р$ " " " " " " " " " " " " " " " " "@#†%†%p$ " " " " " " " " " " " "Р$†%†%0" " " " " " " " " " " " " " " "P#†%†%`$ " " " " " " " " " " " " " " "0"†%†%Р$ " " " " " " " " " " " " " " " " "@#†%†%p$ " " " " " " " " " " " "Р$†%†%0" " " " " " " " " " " " " " " "P#†%†%`$ " " " " " " " " " " " " " " "0"†%†%Р$ " " " " " " " " " " " " " " " " "@#†%†%p$ " " " " " " " " " " " "Р$†%†%3" " " " " " " " " " " " " " " "P#†%†%b$ " " " " " " " " " " " " " " "0"†%†%С$"" " " " " " " " " " " " " " " " "@#†%†%r$!" " " " " " " " "%"W#А$†%†%І%c#!" " " " " " " " " " " " "8"Г$Р%†%°%Ш%2" " " " " " " " " " " " "'"u$Р$†%†%©%B# " " " " " " " " " " " " " "("Д$Р$†%†%Щ%2" " " " " " " " "0"®%ђ%™%ђ%ѓ%∞hАfpfpfpfpfpf03 " " " " " "q$Ѓ%™%Ђ%Ю%І6РF`E`E`E`E`E@4 " " " " " "P#Ђ%Ђ%Ђ%Э%≠%†F`E`E`E`E`E`E0e " " " " " " "`$≠%Ы%Ђ%Ю%™5РF`D`D`D`D " " " "†™гопопёяЁяЁ–Ё–н–о–о–о–о–оРЩ " " " " "@U–ЁлЁпояЁяЁ„Ё–Ёаоаоаоаоаоpь0Ж " " " " "РЩ∆ћпопЁяЁЁЁаоаоаоаоаоао†нPь@Ч " " " " "03†Ї…ћпояЁяЁЏЁ–н–н–н–н–нјнјнјнјнјн∞Ћ©™яЁпопојЁјэјэјэјэјэјэ∞эPь†мјнјнјнјнјмТЩњЋпопо„Ё–эјэјэјэјэјэ`ьPь∞нјнјнјнјнјн†ЇђїяЁпомо–нјэјэјэјэјэРэPьPьPьРмјнјнјнјнјн†™њїпопоўЁ–нјэјэјэјэјэјэјэјэ¬э∆экоњљњљпоою эјэјэјэјэјэ∞эPь†эјэјэјэјэ∆эзюноПЛппю€Ќэ√эјэјэјэјэPьPьјэјэјэјэјэƒэ÷юлоѓђѕќооёю«эјэјэјэјэАьPьPьPь†эјэјэјэјэ≈э„юмоПЫпоооЁю≈эјэјэјэјэјэјэјэ«э–эгюѕэѕэ эаю†Ћ≈эјэјэјэјэРэPьАьјэјэјэ√э√эаюЋэѕэѕэ“юј№≈нјэјэјэРэPьPь†эјэјэјэјэ«э–ю÷юѕэѕэ∆эаю√э¬эјэјэјэPьPьPьPьpьјэјэјэЅэ≈эаюўэѕэѕэ‘э–ю≈эјэјэјэјэјэјэЈ№vИ†ЏѕэѕьяюѕэЪ…rЗЉџАџPьPьPьPьPьpьјэјэјэ≠Ћ†џ»эѕмяюѕэѓ Б©ЪЇ√мјэ∞ьPьPьPьPШ`f`f`fЬЇ≤џ≥мѕьяэѕэњџЧЏЕШ© † † `кPьPьPьPь`ьјэјэјэ≠џpЗ∆эѕьяюѕэѓџФ…Ш©¶ pлPьPьPьPьPШRfUЖѕэњмњмЯ ?dAІcЦ\ъPьPьPьPьPьPьPи`u`fbf@eЃЋњмњмњм_v8dPebf`f`‘PьPьPьPьPьPьPъbfPey®ѕмњмњмП®=d@dbf`f`§PйPьPьPьPьPьPы`Е`fbfPeЫєњмњмњмoЧ;dP…TЦWьPьPьPь[ьn”Uъ5u?d?d?d?d?dGє_ж_йPьPьPьPьPьPьPи`√`fbf@d>d?d?d?d?d9dPebf`і`”PьPьPьPьPьPь_йm’Qл9d?d?d?d?d>d@dbf`Е`”PйPьPьPьPьPьPы`”`ebf@e<d?d?d?d?d;d[ьo”ZьPьPьPь]й_зUь@Ж=d?d?d^Ж6d@…\к_зPьPьPьPьPьVьTйb”`§bfPД6d?d?dOu]ЖR≥b”e§l”o‘_ьWьPьPьPьSьoж^ъPь1d>d?d?d^ЖEФb”e§i”o”_ъ\ьPьPьPьVьTыc”`іbfPД4d?d?dOd]u1dRь_зYъPьPьPь_жWьPь@Ж0d0d0d0d0dPлSь^зPьPьPьPьPьWь_ыo”o”o”h”U’AЖ1uV _ь_иo”o”o”_ж]ьPьPьPьPьVь_жRьPь0d0d0dBЧ^ь_ъo”o”o”o”_ьRьPьPьPьTь_ьo‘o”o”i”f’AЧAЖ0d0d@ЖPьYъYйPьPьRьZйPьPь@Ч0d0d0d0d0uPьPьXйPмPмPмPьPьPь[ьo’o”o”o‘_ы\ьPьPлTь]ьo÷o”n”YъPьPьPьPьPьXйUыPьPь0d0d0d@ЧQь\ь_иo”o”\зRьPьPьPьPьPьYь_жo”o”o”_ы]ьQь@Ц0d@®PьQьXйPьPШRЧP P P @Ж0d0d0d0d@d`f`faf`f`f`fP©PьPьPьTйl√l‘\ъWьPьPьPлPьPьPьa§`ХPьPьPьP®PШPШS®P P P @u0d0d@ЧPьPьPь`÷auPЏPьPьPьPьPьPьPьRъk√l‘\йXьPьPь@Ц0dPe`f`faf`f`f`f`f`f`f@e0d0d0d0d@e`f`f`f`f`f`fPШPьPьPьPЗ`fPзPьPьPьPьPлPьPьPь`Е`fPлPьPџ`f`f`f`f`f`f`f@d0d0d@ЧPьPьPьPґ`fP PьPьPьPьPьPьPьPШ`fP÷PьPьPьPь@Ц0dPe`f`f`f`f`f`f`f`f`f@e0d0d0d0d@e`f`f`f`f`f`fPШPьPьPьPw`fPзPьPьPьPьPлPьPьPь`Е`fPлPьPџ`f`f`f`f`f`f`f@d0d0d@ЧPьPьPьPґ`fP PьPьPьPьPьPьPьPЗ`fP÷PьPьPьPь@Ц0dPe`f`f`f`f`f`f`f`f`f@e0d0d0d0d@e`f`f`f`f`f`fPШPьPьPьPw`fPзPьPьPьPьPлPьPьPь`Е`fPлPьPџ`f`f`f`f`f`f`f@d0d0d@ЧPьPьPьPґ`fP PьPьPьPьPьPьPьPЗ`fP÷PьPьPьPь@Ц0dPe`f`f`f`f`f`f`f`f`f@e0d0d0d0d@e`f`f`f`f`f`fPШPьPьPьPw`fPзPьPьPьPьPлPьPьPь`Е`fPлPьPџ`f`f`f`f`f`f`f@d0d0d@ЧPьPьPьPґ`fP PьPьPьPьPьPьPьPЗ`fP÷PьPьPьPь@Ц0dPe`f`f`f`f " " "`#†% " " " " " " " "Р%p$ " " " " " " "@#†% " " " " " " " "0"†%P# " " " " "`#†% " " " " " " " "Р%q$ " " " " " " "@#†%!" " " " " " " "0"†%Q# " " " "e#Ш%ђ%pV`U`U03 " " "Ъ$®%®5`DPDPD " " "B#Ш%™%АEPDPDPD " " "0"Ъ%©%Ц5P4P4†Ћ†Ћ∞№Ќћпојнјэјэ∞нАџ†Ћ∞џ£™поЎЁјэјэјэPл†Ћ†Ћ∞№љїпо–нјэјэАьPлРџ†Ћ∞№Јїпо’Ёјэјэјэјэ√эЏюћэј№Ѕэјэ†эАьјэ√эбюѕэ‘юƒнјэРэPьјэјэ∆э„юќэбюЅэјэPьPьРэјэ√э‘юѕэ“ю¬эјэPьQ TvњмѓџGЖYўPьPьPь`ЦafЫєњмoЖPe`fPьPьPьQкPfњмњџ;daf`µPьPьPь`ЕQeЭ њм]uRЈSьPь^иAЄ<dLuAІ]иPьPьUьd‘cЕEt=d]Чd”l”_ьPьPь_жPл<dNuV•gіo’XьPьVьd√SЕ7t=dFuWкUыQлSк@є0d0dPЄT…P PџPь\зo”^ыQьRь[зkƒPьPлPлSлPл0d@®Yьk‘WйPьPьRьm÷o‘\ыP @uPЏS…`f`fPe0d0dPe`f`fPЗPьPШP«PьPьPьPь`fPь`f`f`fPf0d@®PьP¶P PьPьPьPЗPиPьP @d`f`f`f`fPe0d0dPe`f`fPЗPьPШP«PьPьPьPь`fPь`f`f`fPf0d@®PьP¶P PьPьPьPwPЎPьP @d`f`f "@#P# " " "А$ " " " "Р$ " " " "А$ "`wІxµЩР©`З`ЗїЙРЩРЩ`wВИЋЙРЩ`Ш`vГwєЙРШРмєџЧ СьpьСЇЊмГ©pьРэФЇЊ№СєPьАл§ЇђџТлUкDЖBЧRкQьiіGЄX÷XьPлPЏGЦjƒSьUкY¶EЖTк`f@d@e`fPџP«PьPьPь`fPe@ЄPЈPьPЏPк@®`frfВИPfФw`vХg`wafУwSІR®TЎVЎSлC®TўUЎS®bЗt®cШcЧcЧcЧcЧ        I Shader "Standard" {
Properties {
 _Color ("Color", Color) = (1,1,1,1)
 _MainTex ("Albedo", 2D) = "white" { }
 _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
 _Glossiness ("Smoothness", Range(0,1)) = 0.5
[Gamma]  _Metallic ("Metallic", Range(0,1)) = 0
 _MetallicGlossMap ("Metallic", 2D) = "white" { }
 _BumpScale ("Scale", Float) = 1
 _BumpMap ("Normal Map", 2D) = "bump" { }
 _Parallax ("Height Scale", Range(0.005,0.08)) = 0.02
 _ParallaxMap ("Height Map", 2D) = "black" { }
 _OcclusionStrength ("Strength", Range(0,1)) = 1
 _OcclusionMap ("Occlusion", 2D) = "white" { }
 _EmissionColor ("Color", Color) = (0,0,0,1)
 _EmissionMap ("Emission", 2D) = "white" { }
 _DetailMask ("Detail Mask", 2D) = "white" { }
 _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
 _DetailNormalMapScale ("Scale", Float) = 1
 _DetailNormalMap ("Normal Map", 2D) = "bump" { }
[Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0
[HideInInspector]  _Mode ("__mode", Float) = 0
[HideInInspector]  _SrcBlend ("__src", Float) = 1
[HideInInspector]  _DstBlend ("__dst", Float) = 0
[HideInInspector]  _ZWrite ("__zw", Float) = 1
}
SubShader { 
 LOD 300
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 19283
Program "vp" {
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2210
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2211
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2212
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2213
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2214
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2215
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2216
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2217
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2218
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2219
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2220
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2221
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2222
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2223
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 2224
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2225
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2226
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2227
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2228
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2229
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2230
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2231
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2232
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2233
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2234
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2235
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2236
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2237
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2238
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2239
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2240
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2241
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2242
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 2243
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 2244
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 2245
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 2246
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 2247
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 2248
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 2249
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2250
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump float t16_11;
mediump vec3 t16_12;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
mediump float t16_30;
void main()
{
    //Instruction 2131
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2132
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2133
    //MAD
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    //Instruction 2134
    //MUL
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2135
    //DP3
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    //Instruction 2136
    //MAX
    t16_2.x = max(t16_0.x, 0.00100000005);
    //Instruction 2137
    //RSQ
    t16_0.x = inversesqrt(t16_2.x);
    //Instruction 2138
    //MUL
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    //Instruction 2139
    //DP3
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    //Instruction 2140
    //MAX
    t16_2.x = max(t16_27, 0.0);
    //Instruction 2141
    //MUL
    t16_27 = t16_2.x * t16_2.x;
    //Instruction 2142
    //ADD
    t16_28 = (-_Glossiness) + 1.0;
    //Instruction 2143
    //MUL
    t16_3.x = t16_28 * t16_28;
    //Instruction 2144
    //MAD
    t16_27 = t16_27 * _Glossiness + t16_3.x;
    //Instruction 2145
    //MUL
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2146
    //MAD
    t16_2.x = t16_27 * t16_2.x + 9.99999975e-005;
    //Instruction 2147
    //ADD
    t16_27 = (-t16_28) + 1.0;
    //Instruction 2148
    //LOG
    t16_28 = log2(t16_28);
    //Instruction 2149
    //MUL
    t16_28 = t16_28 * 0.75;
    //Instruction 2150
    //EXP
    t16_28 = exp2(t16_28);
    //Instruction 2151
    //MUL
    t16_28 = t16_28 * 7.0;
    //Instruction 2152
    //MAD
    t16_27 = t16_27 * 0.967999995 + 0.0299999993;
    //Instruction 2153
    //LOG
    t16_27 = log2(t16_27);
    //Instruction 2154
    //DIV
    t16_27 = 10.0 / t16_27;
    //Instruction 2155
    //MAX
    t16_27 = max(t16_27, -255.936996);
    //Instruction 2156
    //MAD
    t16_3.x = t16_27 * t16_27 + 1.0;
    //Instruction 2157
    //MUL
    t16_27 = t16_27 * t16_27;
    //Instruction 2158
    //DP3
    t16_12.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2159
    //RSQ
    t16_12.x = inversesqrt(t16_12.x);
    //Instruction 2160
    //MUL
    t16_4.xyz = t16_12.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2161
    //DP3
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    //Instruction 2162
    //MAX
    t16_11 = max(t16_0.x, 0.0);
    //Instruction 2163
    //LOG
    t16_0.x = log2(t16_11);
    //Instruction 2164
    //MUL
    t16_0.x = t16_0.x * t16_27;
    //Instruction 2165
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2166
    //MUL
    t16_0.x = t16_0.x * t16_3.x;
    //Instruction 2167
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 2168
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 2169
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 2170
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2171
    //MUL
    t16_5.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 2172
    //MAD
    t16_9.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2173
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2174
    //MAD
    t16_3.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2175
    //MUL
    t16_12.xyz = t16_3.xxx * t16_5.xyz;
    //Instruction 2176
    //ADD
    t16_3.x = (-t16_3.x) + _Glossiness;
    //Instruction 2177
    //ADD
    t16_3.x = t16_3.x + 1.0;
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 2178
    //ADD
    t16_6.xyz = (-t16_9.xyz) + t16_3.xxx;
    //Instruction 2179
    //MAD
    t16_7.xyz = t16_0.xxx * t16_9.xyz + t16_12.xyz;
    //Instruction 2180
    //MUL
    t16_7.xyz = t16_7.xyz * _LightColor0.xyz;
    //Instruction 2181
    //MOV
    t16_4.w = 1.0;
    //Instruction 2182
    //DP4
    t16_8.x = dot(unity_SHAr, t16_4);
    //Instruction 2183
    //DP4
    t16_8.y = dot(unity_SHAg, t16_4);
    //Instruction 2184
    //DP4
    t16_8.z = dot(unity_SHAb, t16_4);
    //Instruction 2185
    //ADD
    t16_8.xyz = t16_8.xyz + vs_TEXCOORD5.xyz;
    //Instruction 2186
    //SAMPLE
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2187
    //ADD
    t16_0.x = (-_OcclusionStrength) + 1.0;
    //Instruction 2188
    //MAD
    t16_0.x = t10_2.x * _OcclusionStrength + t16_0.x;
    //Instruction 2189
    //MUL
    t16_8.xyz = t16_0.xxx * t16_8.xyz;
    //Instruction 2190
    //MUL
    t16_3.xyz = t16_12.xyz * t16_8.xyz;
    //Instruction 2191
    //DP3
    t16_30 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2192
    //MAX
    t16_2.x = max(t16_30, 0.0);
    //Instruction 2193
    //MAD
    t16_3.xyz = t16_7.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 2194
    //DP3
    t16_2.x = dot(t16_1.xyz, t16_4.xyz);
    //Instruction 2195
    //ADD
    t16_2.x = t16_2.x + t16_2.x;
    //Instruction 2196
    //MAD
    t16_2.xyz = t16_4.xyz * (-t16_2.xxx) + t16_1.xyz;
    //Instruction 2197
    //DP3
    t16_1.x = dot(t16_4.xyz, (-t16_1.xyz));
    //Instruction 2198
    //MAX
    t16_29 = max(t16_1.x, 0.0);
    //Instruction 2199
    //ADD
    t16_1.x = (-t16_29) + 1.0;
    //Instruction 2200
    //MUL
    t16_1.x = t16_1.x * t16_1.x;
    //Instruction 2201
    //MUL
    t16_1.x = t16_1.x * t16_1.x;
    //Instruction 2202
    //MAD
    t16_9.xyz = t16_1.xxx * t16_6.xyz + t16_9.xyz;
    //Instruction 2203
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_28);
    //Instruction 2204
    //MUL
    t16_30 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 2205
    //MUL
    t16_4.xyz = t10_1.xyz * vec3(t16_30);
    //Instruction 2206
    //MUL
    t16_4.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 2207
    //MAD
    SV_Target0.xyz = t16_4.xyz * t16_9.xyz + t16_3.xyz;
    //Instruction 2208
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2209
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    //Instruction 4546
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4547
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4548
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4549
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4550
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4551
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4552
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4553
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4554
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4555
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4556
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4557
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4558
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4559
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4560
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4561
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4562
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4563
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4564
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4565
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4566
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4567
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4568
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4569
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4570
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4571
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4572
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4573
    //DP3
    t21 = dot(t1.xyz, t1.xyz);
    //Instruction 4574
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 4575
    //MUL
    t1.xyz = vec3(t21) * t1.xyz;
    //Instruction 4576
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4577
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4578
    //ADD
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 4579
    //MUL
    t3 = t1.yyyy * t2;
    //Instruction 4580
    //MUL
    t2 = t2 * t2;
    //Instruction 4581
    //ADD
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 4582
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 4583
    //MAD
    t3 = t4 * t1.xxxx + t3;
    //Instruction 4584
    //MAD
    t2 = t4 * t4 + t2;
    //Instruction 4585
    //MAD
    t2 = t0 * t0 + t2;
    //Instruction 4586
    //MAD
    t0 = t0 * t1.zzzz + t3;
    //Instruction 4587
    //RSQ
    t3 = inversesqrt(t2);
    //Instruction 4588
    //MAD
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 4589
    //DIV
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    //Instruction 4590
    //MUL
    t0 = t0 * t3;
    //Instruction 4591
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 4592
    //MUL
    t0 = t2 * t0;
    //Instruction 4593
    //MUL
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 4594
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4595
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    //Instruction 4596
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 4597
    //MUL
    t16_5.x = t1.y * t1.y;
    //Instruction 4598
    //MAD
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    //Instruction 4599
    //MUL
    t16_1 = t1.yzzx * t1.xyzz;
    //Instruction 4600
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 4601
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 4602
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 4603
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 4604
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 4605
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 4606
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4607
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
mediump float t16_11;
mediump vec3 t16_12;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
mediump float t16_30;
void main()
{
    //Instruction 4467
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4468
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 4469
    //MAD
    t16_9.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + _WorldSpaceLightPos0.xyz;
    //Instruction 4470
    //MUL
    t16_1.xyz = t16_0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4471
    //DP3
    t16_0.x = dot(t16_9.xyz, t16_9.xyz);
    //Instruction 4472
    //MAX
    t16_2.x = max(t16_0.x, 0.00100000005);
    //Instruction 4473
    //RSQ
    t16_0.x = inversesqrt(t16_2.x);
    //Instruction 4474
    //MUL
    t16_0.xyz = t16_0.xxx * t16_9.xyz;
    //Instruction 4475
    //DP3
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_0.xyz);
    //Instruction 4476
    //MAX
    t16_2.x = max(t16_27, 0.0);
    //Instruction 4477
    //MUL
    t16_27 = t16_2.x * t16_2.x;
    //Instruction 4478
    //ADD
    t16_28 = (-_Glossiness) + 1.0;
    //Instruction 4479
    //MUL
    t16_3.x = t16_28 * t16_28;
    //Instruction 4480
    //MAD
    t16_27 = t16_27 * _Glossiness + t16_3.x;
    //Instruction 4481
    //MUL
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    //Instruction 4482
    //MAD
    t16_2.x = t16_27 * t16_2.x + 9.99999975e-005;
    //Instruction 4483
    //ADD
    t16_27 = (-t16_28) + 1.0;
    //Instruction 4484
    //LOG
    t16_28 = log2(t16_28);
    //Instruction 4485
    //MUL
    t16_28 = t16_28 * 0.75;
    //Instruction 4486
    //EXP
    t16_28 = exp2(t16_28);
    //Instruction 4487
    //MUL
    t16_28 = t16_28 * 7.0;
    //Instruction 4488
    //MAD
    t16_27 = t16_27 * 0.967999995 + 0.0299999993;
    //Instruction 4489
    //LOG
    t16_27 = log2(t16_27);
    //Instruction 4490
    //DIV
    t16_27 = 10.0 / t16_27;
    //Instruction 4491
    //MAX
    t16_27 = max(t16_27, -255.936996);
    //Instruction 4492
    //MAD
    t16_3.x = t16_27 * t16_27 + 1.0;
    //Instruction 4493
    //MUL
    t16_27 = t16_27 * t16_27;
    //Instruction 4494
    //DP3
    t16_12.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4495
    //RSQ
    t16_12.x = inversesqrt(t16_12.x);
    //Instruction 4496
    //MUL
    t16_4.xyz = t16_12.xxx * vs_TEXCOORD4.xyz;
    //Instruction 4497
    //DP3
    t16_0.x = dot(t16_4.xyz, t16_0.xyz);
    //Instruction 4498
    //MAX
    t16_11 = max(t16_0.x, 0.0);
    //Instruction 4499
    //LOG
    t16_0.x = log2(t16_11);
    //Instruction 4500
    //MUL
    t16_0.x = t16_0.x * t16_27;
    //Instruction 4501
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 4502
    //MUL
    t16_0.x = t16_0.x * t16_3.x;
    //Instruction 4503
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 4504
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 4505
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 4506
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4507
    //MUL
    t16_5.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 4508
    //MAD
    t16_9.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4509
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4510
    //MAD
    t16_3.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4511
    //MUL
    t16_12.xyz = t16_3.xxx * t16_5.xyz;
    //Instruction 4512
    //ADD
    t16_3.x = (-t16_3.x) + _Glossiness;
    //Instruction 4513
    //ADD
    t16_3.x = t16_3.x + 1.0;
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 4514
    //ADD
    t16_6.xyz = (-t16_9.xyz) + t16_3.xxx;
    //Instruction 4515
    //MAD
    t16_7.xyz = t16_0.xxx * t16_9.xyz + t16_12.xyz;
    //Instruction 4516
    //MUL
    t16_7.xyz = t16_7.xyz * _LightColor0.xyz;
    //Instruction 4517
    //MOV
    t16_4.w = 1.0;
    //Instruction 4518
    //DP4
    t16_8.x = dot(unity_SHAr, t16_4);
    //Instruction 4519
    //DP4
    t16_8.y = dot(unity_SHAg, t16_4);
    //Instruction 4520
    //DP4
    t16_8.z = dot(unity_SHAb, t16_4);
    //Instruction 4521
    //ADD
    t16_8.xyz = t16_8.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4522
    //SAMPLE
    t10_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4523
    //ADD
    t16_0.x = (-_OcclusionStrength) + 1.0;
    //Instruction 4524
    //MAD
    t16_0.x = t10_2.x * _OcclusionStrength + t16_0.x;
    //Instruction 4525
    //MUL
    t16_8.xyz = t16_0.xxx * t16_8.xyz;
    //Instruction 4526
    //MUL
    t16_3.xyz = t16_12.xyz * t16_8.xyz;
    //Instruction 4527
    //DP3
    t16_30 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4528
    //MAX
    t16_2.x = max(t16_30, 0.0);
    //Instruction 4529
    //MAD
    t16_3.xyz = t16_7.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 4530
    //DP3
    t16_2.x = dot(t16_1.xyz, t16_4.xyz);
    //Instruction 4531
    //ADD
    t16_2.x = t16_2.x + t16_2.x;
    //Instruction 4532
    //MAD
    t16_2.xyz = t16_4.xyz * (-t16_2.xxx) + t16_1.xyz;
    //Instruction 4533
    //DP3
    t16_1.x = dot(t16_4.xyz, (-t16_1.xyz));
    //Instruction 4534
    //MAX
    t16_29 = max(t16_1.x, 0.0);
    //Instruction 4535
    //ADD
    t16_1.x = (-t16_29) + 1.0;
    //Instruction 4536
    //MUL
    t16_1.x = t16_1.x * t16_1.x;
    //Instruction 4537
    //MUL
    t16_1.x = t16_1.x * t16_1.x;
    //Instruction 4538
    //MAD
    t16_9.xyz = t16_1.xxx * t16_6.xyz + t16_9.xyz;
    //Instruction 4539
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_2.xyz, t16_28);
    //Instruction 4540
    //MUL
    t16_30 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 4541
    //MUL
    t16_4.xyz = t10_1.xyz * vec3(t16_30);
    //Instruction 4542
    //MUL
    t16_4.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 4543
    //MAD
    SV_Target0.xyz = t16_4.xyz * t16_9.xyz + t16_3.xyz;
    //Instruction 4544
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4545
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2334
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2335
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2336
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2337
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2338
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2339
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2340
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2341
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2342
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2343
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2344
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2345
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2346
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2347
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 2348
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2349
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2350
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2351
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2352
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2353
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2354
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2355
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2356
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2357
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2358
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2359
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2360
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2361
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2362
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2363
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2364
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2365
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2366
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 2367
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 2368
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 2369
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 2370
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 2371
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 2372
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 2373
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2374
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2375
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 2376
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 2377
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2378
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 2379
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 2380
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 2381
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 2382
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2383
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_9;
mediump float t16_12;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
mediump float t16_30;
void main()
{
    //Instruction 2251
    //SAMPLE_C_LZ
    vec3 txVec11 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    //Instruction 2252
    //ADD
    t16_9 = (-_LightShadowData.x) + 1.0;
    //Instruction 2253
    //MAD
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    //Instruction 2254
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 2255
    //DP3
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2256
    //RSQ
    t16_27 = inversesqrt(t16_27);
    //Instruction 2257
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    //Instruction 2258
    //MUL
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    //Instruction 2259
    //DP3
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2260
    //MAX
    t16_3.x = max(t16_27, 0.00100000005);
    //Instruction 2261
    //RSQ
    t16_27 = inversesqrt(t16_3.x);
    //Instruction 2262
    //MUL
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    //Instruction 2263
    //DP3
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    //Instruction 2264
    //MAX
    t16_3.x = max(t16_27, 0.0);
    //Instruction 2265
    //MUL
    t16_27 = t16_3.x * t16_3.x;
    //Instruction 2266
    //ADD
    t16_28 = (-_Glossiness) + 1.0;
    //Instruction 2267
    //MUL
    t16_29 = t16_28 * t16_28;
    //Instruction 2268
    //MAD
    t16_27 = t16_27 * _Glossiness + t16_29;
    //Instruction 2269
    //MUL
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2270
    //MAD
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    //Instruction 2271
    //ADD
    t16_27 = (-t16_28) + 1.0;
    //Instruction 2272
    //LOG
    t16_28 = log2(t16_28);
    //Instruction 2273
    //MUL
    t16_28 = t16_28 * 0.75;
    //Instruction 2274
    //EXP
    t16_28 = exp2(t16_28);
    //Instruction 2275
    //MUL
    t16_28 = t16_28 * 7.0;
    //Instruction 2276
    //MAD
    t16_27 = t16_27 * 0.967999995 + 0.0299999993;
    //Instruction 2277
    //LOG
    t16_27 = log2(t16_27);
    //Instruction 2278
    //DIV
    t16_27 = 10.0 / t16_27;
    //Instruction 2279
    //MAX
    t16_27 = max(t16_27, -255.936996);
    //Instruction 2280
    //MAD
    t16_29 = t16_27 * t16_27 + 1.0;
    //Instruction 2281
    //MUL
    t16_27 = t16_27 * t16_27;
    //Instruction 2282
    //DP3
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2283
    //RSQ
    t16_4.x = inversesqrt(t16_4.x);
    //Instruction 2284
    //MUL
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2285
    //DP3
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    //Instruction 2286
    //MAX
    t16_12 = max(t16_1.x, 0.0);
    //Instruction 2287
    //LOG
    t16_1.x = log2(t16_12);
    //Instruction 2288
    //MUL
    t16_27 = t16_27 * t16_1.x;
    //Instruction 2289
    //EXP
    t16_27 = exp2(t16_27);
    //Instruction 2290
    //MUL
    t16_27 = t16_27 * t16_29;
    //Instruction 2291
    //DIV
    t16_3.x = t16_27 / t16_3.x;
    //Instruction 2292
    //MAX
    t16_27 = max(t16_3.x, 0.0);
    //Instruction 2293
    //MIN
    t16_27 = min(t16_27, 100.0);
    //Instruction 2294
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2295
    //MUL
    t16_5.xyz = t10_3.xyz * _Color.xyz;
    //Instruction 2296
    //MAD
    t16_1.xyz = _Color.xyz * t10_3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2297
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2298
    //MAD
    t16_29 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2299
    //MUL
    t16_6.xyz = vec3(t16_29) * t16_5.xyz;
    //Instruction 2300
    //ADD
    t16_29 = (-t16_29) + _Glossiness;
    //Instruction 2301
    //ADD
    t16_29 = t16_29 + 1.0;
    t16_29 = clamp(t16_29, 0.0, 1.0);
    //Instruction 2302
    //ADD
    t16_7.xyz = (-t16_1.xyz) + vec3(t16_29);
    //Instruction 2303
    //MAD
    t16_8.xyz = vec3(t16_27) * t16_1.xyz + t16_6.xyz;
    //Instruction 2304
    //MUL
    t16_0.xyz = t16_0.xyz * t16_8.xyz;
    //Instruction 2305
    //MOV
    t16_4.w = 1.0;
    //Instruction 2306
    //DP4
    t16_8.x = dot(unity_SHAr, t16_4);
    //Instruction 2307
    //DP4
    t16_8.y = dot(unity_SHAg, t16_4);
    //Instruction 2308
    //DP4
    t16_8.z = dot(unity_SHAb, t16_4);
    //Instruction 2309
    //ADD
    t16_8.xyz = t16_8.xyz + vs_TEXCOORD5.xyz;
    //Instruction 2310
    //SAMPLE
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2311
    //ADD
    t16_27 = (-_OcclusionStrength) + 1.0;
    //Instruction 2312
    //MAD
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    //Instruction 2313
    //MUL
    t16_8.xyz = vec3(t16_27) * t16_8.xyz;
    //Instruction 2314
    //MUL
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    //Instruction 2315
    //DP3
    t16_29 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2316
    //MAX
    t16_3.x = max(t16_29, 0.0);
    //Instruction 2317
    //MAD
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_6.xyz;
    //Instruction 2318
    //DP3
    t16_3.x = dot(t16_2.xyz, t16_4.xyz);
    //Instruction 2319
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 2320
    //MAD
    t16_3.xyz = t16_4.xyz * (-t16_3.xxx) + t16_2.xyz;
    //Instruction 2321
    //DP3
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    //Instruction 2322
    //MAX
    t16_30 = max(t16_2.x, 0.0);
    //Instruction 2323
    //ADD
    t16_2.x = (-t16_30) + 1.0;
    //Instruction 2324
    //MUL
    t16_2.x = t16_2.x * t16_2.x;
    //Instruction 2325
    //MUL
    t16_2.x = t16_2.x * t16_2.x;
    //Instruction 2326
    //MAD
    t16_1.xyz = t16_2.xxx * t16_7.xyz + t16_1.xyz;
    //Instruction 2327
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_28);
    //Instruction 2328
    //MUL
    t16_28 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 2329
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_28);
    //Instruction 2330
    //MUL
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    //Instruction 2331
    //MAD
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    //Instruction 2332
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2333
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t21;
void main()
{
    //Instruction 4691
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4692
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4693
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4694
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4695
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4696
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4697
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4698
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4699
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4700
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4701
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4702
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4703
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4704
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4705
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4706
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4707
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4708
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4709
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4710
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4711
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4712
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4713
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4714
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4715
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4716
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4717
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 4718
    //DP3
    t21 = dot(t1.xyz, t1.xyz);
    //Instruction 4719
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 4720
    //MUL
    t1.xyz = vec3(t21) * t1.xyz;
    //Instruction 4721
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 4722
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 4723
    //ADD
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 4724
    //MUL
    t3 = t1.yyyy * t2;
    //Instruction 4725
    //MUL
    t2 = t2 * t2;
    //Instruction 4726
    //ADD
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 4727
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 4728
    //MAD
    t3 = t4 * t1.xxxx + t3;
    //Instruction 4729
    //MAD
    t2 = t4 * t4 + t2;
    //Instruction 4730
    //MAD
    t2 = t0 * t0 + t2;
    //Instruction 4731
    //MAD
    t0 = t0 * t1.zzzz + t3;
    //Instruction 4732
    //RSQ
    t3 = inversesqrt(t2);
    //Instruction 4733
    //MAD
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 4734
    //DIV
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    //Instruction 4735
    //MUL
    t0 = t0 * t3;
    //Instruction 4736
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 4737
    //MUL
    t0 = t2 * t0;
    //Instruction 4738
    //MUL
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 4739
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4740
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    //Instruction 4741
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 4742
    //MUL
    t16_5.x = t1.y * t1.y;
    //Instruction 4743
    //MAD
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    //Instruction 4744
    //MUL
    t16_1 = t1.yzzx * t1.xyzz;
    //Instruction 4745
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 4746
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 4747
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 4748
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 4749
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 4750
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 4751
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 4752
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4753
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 4754
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 4755
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 4756
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 4757
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 4758
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 4759
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 4760
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 4761
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
mediump float t16_9;
mediump float t16_12;
mediump float t16_27;
mediump float t16_28;
mediump float t16_29;
mediump float t16_30;
void main()
{
    //Instruction 4608
    //SAMPLE_C_LZ
    vec3 txVec16 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec16, 0.0);
    //Instruction 4609
    //ADD
    t16_9 = (-_LightShadowData.x) + 1.0;
    //Instruction 4610
    //MAD
    t16_0.x = t16_0.x * t16_9 + _LightShadowData.x;
    //Instruction 4611
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 4612
    //DP3
    t16_27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4613
    //RSQ
    t16_27 = inversesqrt(t16_27);
    //Instruction 4614
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_27) + _WorldSpaceLightPos0.xyz;
    //Instruction 4615
    //MUL
    t16_2.xyz = vec3(t16_27) * vs_TEXCOORD1.xyz;
    //Instruction 4616
    //DP3
    t16_27 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 4617
    //MAX
    t16_3.x = max(t16_27, 0.00100000005);
    //Instruction 4618
    //RSQ
    t16_27 = inversesqrt(t16_3.x);
    //Instruction 4619
    //MUL
    t16_1.xyz = vec3(t16_27) * t16_1.xyz;
    //Instruction 4620
    //DP3
    t16_27 = dot(_WorldSpaceLightPos0.xyz, t16_1.xyz);
    //Instruction 4621
    //MAX
    t16_3.x = max(t16_27, 0.0);
    //Instruction 4622
    //MUL
    t16_27 = t16_3.x * t16_3.x;
    //Instruction 4623
    //ADD
    t16_28 = (-_Glossiness) + 1.0;
    //Instruction 4624
    //MUL
    t16_29 = t16_28 * t16_28;
    //Instruction 4625
    //MAD
    t16_27 = t16_27 * _Glossiness + t16_29;
    //Instruction 4626
    //MUL
    t16_27 = t16_27 * unity_LightGammaCorrectionConsts.z;
    //Instruction 4627
    //MAD
    t16_3.x = t16_27 * t16_3.x + 9.99999975e-005;
    //Instruction 4628
    //ADD
    t16_27 = (-t16_28) + 1.0;
    //Instruction 4629
    //LOG
    t16_28 = log2(t16_28);
    //Instruction 4630
    //MUL
    t16_28 = t16_28 * 0.75;
    //Instruction 4631
    //EXP
    t16_28 = exp2(t16_28);
    //Instruction 4632
    //MUL
    t16_28 = t16_28 * 7.0;
    //Instruction 4633
    //MAD
    t16_27 = t16_27 * 0.967999995 + 0.0299999993;
    //Instruction 4634
    //LOG
    t16_27 = log2(t16_27);
    //Instruction 4635
    //DIV
    t16_27 = 10.0 / t16_27;
    //Instruction 4636
    //MAX
    t16_27 = max(t16_27, -255.936996);
    //Instruction 4637
    //MAD
    t16_29 = t16_27 * t16_27 + 1.0;
    //Instruction 4638
    //MUL
    t16_27 = t16_27 * t16_27;
    //Instruction 4639
    //DP3
    t16_4.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4640
    //RSQ
    t16_4.x = inversesqrt(t16_4.x);
    //Instruction 4641
    //MUL
    t16_4.xyz = t16_4.xxx * vs_TEXCOORD4.xyz;
    //Instruction 4642
    //DP3
    t16_1.x = dot(t16_4.xyz, t16_1.xyz);
    //Instruction 4643
    //MAX
    t16_12 = max(t16_1.x, 0.0);
    //Instruction 4644
    //LOG
    t16_1.x = log2(t16_12);
    //Instruction 4645
    //MUL
    t16_27 = t16_27 * t16_1.x;
    //Instruction 4646
    //EXP
    t16_27 = exp2(t16_27);
    //Instruction 4647
    //MUL
    t16_27 = t16_27 * t16_29;
    //Instruction 4648
    //DIV
    t16_3.x = t16_27 / t16_3.x;
    //Instruction 4649
    //MAX
    t16_27 = max(t16_3.x, 0.0);
    //Instruction 4650
    //MIN
    t16_27 = min(t16_27, 100.0);
    //Instruction 4651
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4652
    //MUL
    t16_5.xyz = t10_3.xyz * _Color.xyz;
    //Instruction 4653
    //MAD
    t16_1.xyz = _Color.xyz * t10_3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4654
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4655
    //MAD
    t16_29 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4656
    //MUL
    t16_6.xyz = vec3(t16_29) * t16_5.xyz;
    //Instruction 4657
    //ADD
    t16_29 = (-t16_29) + _Glossiness;
    //Instruction 4658
    //ADD
    t16_29 = t16_29 + 1.0;
    t16_29 = clamp(t16_29, 0.0, 1.0);
    //Instruction 4659
    //ADD
    t16_7.xyz = (-t16_1.xyz) + vec3(t16_29);
    //Instruction 4660
    //MAD
    t16_8.xyz = vec3(t16_27) * t16_1.xyz + t16_6.xyz;
    //Instruction 4661
    //MUL
    t16_0.xyz = t16_0.xyz * t16_8.xyz;
    //Instruction 4662
    //MOV
    t16_4.w = 1.0;
    //Instruction 4663
    //DP4
    t16_8.x = dot(unity_SHAr, t16_4);
    //Instruction 4664
    //DP4
    t16_8.y = dot(unity_SHAg, t16_4);
    //Instruction 4665
    //DP4
    t16_8.z = dot(unity_SHAb, t16_4);
    //Instruction 4666
    //ADD
    t16_8.xyz = t16_8.xyz + vs_TEXCOORD5.xyz;
    //Instruction 4667
    //SAMPLE
    t10_3.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 4668
    //ADD
    t16_27 = (-_OcclusionStrength) + 1.0;
    //Instruction 4669
    //MAD
    t16_27 = t10_3.x * _OcclusionStrength + t16_27;
    //Instruction 4670
    //MUL
    t16_8.xyz = vec3(t16_27) * t16_8.xyz;
    //Instruction 4671
    //MUL
    t16_6.xyz = t16_6.xyz * t16_8.xyz;
    //Instruction 4672
    //DP3
    t16_29 = dot(t16_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4673
    //MAX
    t16_3.x = max(t16_29, 0.0);
    //Instruction 4674
    //MAD
    t16_0.xyz = t16_0.xyz * t16_3.xxx + t16_6.xyz;
    //Instruction 4675
    //DP3
    t16_3.x = dot(t16_2.xyz, t16_4.xyz);
    //Instruction 4676
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 4677
    //MAD
    t16_3.xyz = t16_4.xyz * (-t16_3.xxx) + t16_2.xyz;
    //Instruction 4678
    //DP3
    t16_2.x = dot(t16_4.xyz, (-t16_2.xyz));
    //Instruction 4679
    //MAX
    t16_30 = max(t16_2.x, 0.0);
    //Instruction 4680
    //ADD
    t16_2.x = (-t16_30) + 1.0;
    //Instruction 4681
    //MUL
    t16_2.x = t16_2.x * t16_2.x;
    //Instruction 4682
    //MUL
    t16_2.x = t16_2.x * t16_2.x;
    //Instruction 4683
    //MAD
    t16_1.xyz = t16_2.xxx * t16_7.xyz + t16_1.xyz;
    //Instruction 4684
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_28);
    //Instruction 4685
    //MUL
    t16_28 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 4686
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_28);
    //Instruction 4687
    //MUL
    t16_4.xyz = vec3(t16_27) * t16_4.xyz;
    //Instruction 4688
    //MAD
    SV_Target0.xyz = t16_4.xyz * t16_1.xyz + t16_0.xyz;
    //Instruction 4689
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4690
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend [_SrcBlend] One
  GpuProgramID 115835
Program "vp" {
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2439
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2440
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2441
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2442
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2443
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2444
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2445
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2446
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2447
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2448
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2449
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2450
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2451
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2452
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2453
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2454
    //MOV
    t1.w = t0.x;
    //Instruction 2455
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2456
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2457
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2458
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2459
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2460
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2461
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2462
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2463
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2464
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2465
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2466
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2467
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2468
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2469
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2470
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2471
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2472
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2473
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2474
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2475
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2476
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2477
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2478
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2479
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2480
    //MOV
    t2.w = t0.z;
    //Instruction 2481
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2482
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2483
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2484
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2485
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2486
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2487
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2488
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2489
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2490
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2491
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2492
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2493
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2494
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2495
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2496
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2497
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2498
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2499
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2500
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2501
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
highp float t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_8;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 2384
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2385
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2386
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2387
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2388
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2389
    //DP3
    t16_4.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2390
    //RSQ
    t16_4.x = inversesqrt(t16_4.x);
    //Instruction 2391
    //MUL
    t16_4.xyz = t16_4.xxx * t16_1.xyz;
    //Instruction 2392
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_4.xyz;
    //Instruction 2393
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2394
    //MAX
    t16_2.x = max(t16_0.x, 0.00100000005);
    //Instruction 2395
    //RSQ
    t16_0.x = inversesqrt(t16_2.x);
    //Instruction 2396
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2397
    //DP3
    t16_0.x = dot(t16_4.xyz, t16_1.xyz);
    //Instruction 2398
    //MAX
    t16_2.x = max(t16_0.x, 0.0);
    //Instruction 2399
    //MUL
    t16_0.x = t16_2.x * t16_2.x;
    //Instruction 2400
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 2401
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 2402
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 2403
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 2404
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 2405
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 2406
    //MAX
    t16_13 = max(t16_13, -255.936996);
    //Instruction 2407
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 2408
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2409
    //MAD
    t16_2.x = t16_0.x * t16_2.x + 9.99999975e-005;
    //Instruction 2410
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2411
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2412
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2413
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2414
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 2415
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2416
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 2417
    //MUL
    t16_4.x = t16_13 * t16_13;
    //Instruction 2418
    //MAD
    t16_8 = t16_13 * t16_13 + 1.0;
    //Instruction 2419
    //MUL
    t16_0.x = t16_0.x * t16_4.x;
    //Instruction 2420
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2421
    //MUL
    t16_0.x = t16_0.x * t16_8;
    //Instruction 2422
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 2423
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 2424
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 2425
    //SAMPLE
    t10_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2426
    //MAD
    t16_4.xyz = _Color.xyz * t10_2.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2427
    //MUL
    t16_2.xzw = t10_2.xzw * _Color.xyz;
    //Instruction 2428
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2429
    //MUL
    t16_0.xyz = t16_4.xyz * t16_0.xxx;
    //Instruction 2430
    //MAD
    t16_12 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2431
    //MAD
    t16_0.xyz = t16_2.xzw * vec3(t16_12) + t16_0.xyz;
    //Instruction 2432
    //DP3
    t2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2433
    //SAMPLE
    t10_2.x = texture(_LightTexture0, vec2(t2)).w;
    //Instruction 2434
    //MUL
    t16_1.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 2435
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2436
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_0.xyz;
    //Instruction 2437
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2438
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 4811
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4812
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4813
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4814
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4815
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4816
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4817
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4818
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4819
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4820
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4821
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4822
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4823
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4824
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4825
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4826
    //MOV
    t1.w = t0.x;
    //Instruction 4827
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4828
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 4829
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 4830
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4831
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4832
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 4833
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4834
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4835
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4836
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4837
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4838
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4839
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4840
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4841
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4842
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4843
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4844
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4845
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4846
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4847
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 4848
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 4849
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4850
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4851
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 4852
    //MOV
    t2.w = t0.z;
    //Instruction 4853
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 4854
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 4762
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4763
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 4764
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 4765
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 4766
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 4767
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 4768
    //DP3
    t16_12 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 4769
    //MAX
    t16_2.x = max(t16_12, 0.00100000005);
    //Instruction 4770
    //RSQ
    t16_12 = inversesqrt(t16_2.x);
    //Instruction 4771
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 4772
    //DP3
    t16_12 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 4773
    //MAX
    t16_2.x = max(t16_12, 0.0);
    //Instruction 4774
    //MUL
    t16_12 = t16_2.x * t16_2.x;
    //Instruction 4775
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 4776
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 4777
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 4778
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 4779
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 4780
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 4781
    //MAX
    t16_13 = max(t16_13, -255.936996);
    //Instruction 4782
    //MAD
    t16_12 = t16_12 * _Glossiness + t16_3.x;
    //Instruction 4783
    //MUL
    t16_12 = t16_12 * unity_LightGammaCorrectionConsts.z;
    //Instruction 4784
    //MAD
    t16_2.x = t16_12 * t16_2.x + 9.99999975e-005;
    //Instruction 4785
    //MAD
    t16_12 = t16_13 * t16_13 + 1.0;
    //Instruction 4786
    //MUL
    t16_13 = t16_13 * t16_13;
    //Instruction 4787
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4788
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 4789
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 4790
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 4791
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 4792
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 4793
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 4794
    //MUL
    t16_0.x = t16_0.x * t16_13;
    //Instruction 4795
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 4796
    //MUL
    t16_0.x = t16_0.x * t16_12;
    //Instruction 4797
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 4798
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 4799
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 4800
    //SAMPLE
    t10_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4801
    //MAD
    t16_4.xyz = _Color.xyz * t10_2.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4802
    //MUL
    t16_2.xzw = t10_2.xzw * _Color.xyz;
    //Instruction 4803
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4804
    //MUL
    t16_0.xyz = t16_4.xyz * t16_0.xxx;
    //Instruction 4805
    //MAD
    t16_12 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4806
    //MAD
    t16_0.xyz = t16_2.xzw * vec3(t16_12) + t16_0.xyz;
    //Instruction 4807
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 4808
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_0.xyz;
    //Instruction 4809
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4810
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2564
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2565
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2566
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2567
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2568
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2569
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2570
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2571
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2572
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2573
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2574
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2575
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2576
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2577
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2578
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2579
    //MOV
    t1.w = t0.x;
    //Instruction 2580
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2581
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2582
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2583
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2584
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2585
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2586
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2587
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2588
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2589
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2590
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2591
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2592
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2593
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2594
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2595
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2596
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2597
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2598
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2599
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2600
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2601
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2602
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2603
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2604
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2605
    //MOV
    t2.w = t0.z;
    //Instruction 2606
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2607
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2608
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2609
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2610
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2611
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2612
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2613
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2614
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2615
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 2616
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 2617
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 2618
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 2619
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 2620
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 2621
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 2622
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 2623
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 2624
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 2625
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 2626
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 2627
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 2628
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 2629
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 2630
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 2631
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 2632
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec2 t16_7;
mediump float t16_10;
bool tb12;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 2502
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2503
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2504
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2505
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2506
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2507
    //DP3
    t16_5.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2508
    //RSQ
    t16_5.x = inversesqrt(t16_5.x);
    //Instruction 2509
    //MUL
    t16_5.xyz = t16_5.xxx * t16_1.xyz;
    //Instruction 2510
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_5.xyz;
    //Instruction 2511
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2512
    //MAX
    t16_2.x = max(t16_0.x, 0.00100000005);
    //Instruction 2513
    //RSQ
    t16_0.x = inversesqrt(t16_2.x);
    //Instruction 2514
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2515
    //DP3
    t16_0.x = dot(t16_5.xyz, t16_1.xyz);
    //Instruction 2516
    //MAX
    t16_2.x = max(t16_0.x, 0.0);
    //Instruction 2517
    //MUL
    t16_0.x = t16_2.x * t16_2.x;
    //Instruction 2518
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 2519
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 2520
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 2521
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 2522
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 2523
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 2524
    //MAX
    t16_16 = max(t16_16, -255.936996);
    //Instruction 2525
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 2526
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2527
    //MAD
    t16_2.x = t16_0.x * t16_2.x + 9.99999975e-005;
    //Instruction 2528
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2529
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2530
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2531
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2532
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_5.xyz);
    //Instruction 2533
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2534
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 2535
    //MUL
    t16_5.x = t16_16 * t16_16;
    //Instruction 2536
    //MAD
    t16_10 = t16_16 * t16_16 + 1.0;
    //Instruction 2537
    //MUL
    t16_0.x = t16_0.x * t16_5.x;
    //Instruction 2538
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2539
    //MUL
    t16_0.x = t16_0.x * t16_10;
    //Instruction 2540
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 2541
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 2542
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 2543
    //SAMPLE
    t10_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2544
    //MAD
    t16_5.xyz = _Color.xyz * t10_2.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2545
    //MUL
    t16_2.xzw = t10_2.xzw * _Color.xyz;
    //Instruction 2546
    //MAD
    t16_5.xyz = vec3(_Metallic) * t16_5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2547
    //MUL
    t16_0.xyz = t16_5.xyz * t16_0.xxx;
    //Instruction 2548
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2549
    //MAD
    t16_0.xyz = t16_2.xzw * vec3(t16_15) + t16_0.xyz;
    //Instruction 2550
    //DIV
    t16_1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 2551
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.5, 0.5);
    //Instruction 2552
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 2553
    //LT
    tb12 = 0.0<vs_TEXCOORD5.z;
    //Instruction 2554
    //MOVC
    t10_4 = (tb12) ? 1.0 : 0.0;
    //Instruction 2555
    //MUL
    t10_4 = t10_2.x * t10_4;
    //Instruction 2556
    //DP3
    t16_2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2557
    //SAMPLE
    t10_2.x = texture(_LightTextureB0, t16_2.xx).w;
    //Instruction 2558
    //MUL
    t10_4 = t10_2.x * t10_4;
    //Instruction 2559
    //MUL
    t16_1.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 2560
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2561
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 2562
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2563
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 4912
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4913
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4914
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4915
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4916
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 4917
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 4918
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 4919
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4920
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4921
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4922
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4923
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4924
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4925
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 4926
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 4927
    //MOV
    t1.w = t0.x;
    //Instruction 4928
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 4929
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 4930
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 4931
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4932
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4933
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 4934
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 4935
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4936
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4937
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4938
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4939
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4940
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4941
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4942
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4943
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4944
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4945
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 4946
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 4947
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 4948
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 4949
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 4950
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 4951
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 4952
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 4953
    //MOV
    t2.w = t0.z;
    //Instruction 4954
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 4955
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 4956
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 4957
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 4958
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 4959
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4960
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 4961
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 4962
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 4963
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 4964
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 4965
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 4966
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 4967
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 4968
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 4969
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 4970
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 4971
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 4972
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 4973
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 4974
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
highp float t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_8;
lowp float t10_10;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 4855
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4856
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 4857
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 4858
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 4859
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 4860
    //DP3
    t16_4.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 4861
    //RSQ
    t16_4.x = inversesqrt(t16_4.x);
    //Instruction 4862
    //MUL
    t16_4.xyz = t16_4.xxx * t16_1.xyz;
    //Instruction 4863
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_4.xyz;
    //Instruction 4864
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 4865
    //MAX
    t16_2.x = max(t16_0.x, 0.00100000005);
    //Instruction 4866
    //RSQ
    t16_0.x = inversesqrt(t16_2.x);
    //Instruction 4867
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 4868
    //DP3
    t16_0.x = dot(t16_4.xyz, t16_1.xyz);
    //Instruction 4869
    //MAX
    t16_2.x = max(t16_0.x, 0.0);
    //Instruction 4870
    //MUL
    t16_0.x = t16_2.x * t16_2.x;
    //Instruction 4871
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 4872
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 4873
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 4874
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 4875
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 4876
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 4877
    //MAX
    t16_13 = max(t16_13, -255.936996);
    //Instruction 4878
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 4879
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4880
    //MAD
    t16_2.x = t16_0.x * t16_2.x + 9.99999975e-005;
    //Instruction 4881
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 4882
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 4883
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 4884
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 4885
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 4886
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 4887
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 4888
    //MUL
    t16_4.x = t16_13 * t16_13;
    //Instruction 4889
    //MAD
    t16_8 = t16_13 * t16_13 + 1.0;
    //Instruction 4890
    //MUL
    t16_0.x = t16_0.x * t16_4.x;
    //Instruction 4891
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 4892
    //MUL
    t16_0.x = t16_0.x * t16_8;
    //Instruction 4893
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 4894
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 4895
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 4896
    //SAMPLE
    t10_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4897
    //MAD
    t16_4.xyz = _Color.xyz * t10_2.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 4898
    //MUL
    t16_2.xzw = t10_2.xzw * _Color.xyz;
    //Instruction 4899
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 4900
    //MUL
    t16_0.xyz = t16_4.xyz * t16_0.xxx;
    //Instruction 4901
    //MAD
    t16_12 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 4902
    //MAD
    t16_0.xyz = t16_2.xzw * vec3(t16_12) + t16_0.xyz;
    //Instruction 4903
    //DP3
    t2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 4904
    //SAMPLE
    t10_2.x = texture(_LightTextureB0, vec2(t2)).w;
    //Instruction 4905
    //SAMPLE
    t10_10 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 4906
    //MUL
    t16_2.x = t10_10 * t10_2.x;
    //Instruction 4907
    //MUL
    t16_1.xyz = t16_2.xxx * _LightColor0.xyz;
    //Instruction 4908
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 4909
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_0.xyz;
    //Instruction 4910
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4911
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2684
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2685
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2686
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2687
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2688
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2689
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2690
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2691
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2692
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2693
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2694
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2695
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2696
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2697
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2698
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2699
    //MOV
    t1.w = t0.x;
    //Instruction 2700
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2701
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2702
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2703
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2704
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2705
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2706
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2707
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2708
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2709
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2710
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2711
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2712
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2713
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2714
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2715
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2716
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2717
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2718
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2719
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2720
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2721
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2722
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2723
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2724
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2725
    //MOV
    t2.w = t0.z;
    //Instruction 2726
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2727
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2728
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 2729
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 2730
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2731
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 2732
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 2733
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 2734
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 2735
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 2736
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 2737
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 2738
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 2739
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 2740
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 2741
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 2633
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2634
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2635
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2636
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2637
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2638
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 2639
    //DP3
    t16_12 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2640
    //MAX
    t16_2.x = max(t16_12, 0.00100000005);
    //Instruction 2641
    //RSQ
    t16_12 = inversesqrt(t16_2.x);
    //Instruction 2642
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 2643
    //DP3
    t16_12 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 2644
    //MAX
    t16_2.x = max(t16_12, 0.0);
    //Instruction 2645
    //MUL
    t16_12 = t16_2.x * t16_2.x;
    //Instruction 2646
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 2647
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 2648
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 2649
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 2650
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 2651
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 2652
    //MAX
    t16_13 = max(t16_13, -255.936996);
    //Instruction 2653
    //MAD
    t16_12 = t16_12 * _Glossiness + t16_3.x;
    //Instruction 2654
    //MUL
    t16_12 = t16_12 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2655
    //MAD
    t16_2.x = t16_12 * t16_2.x + 9.99999975e-005;
    //Instruction 2656
    //MAD
    t16_12 = t16_13 * t16_13 + 1.0;
    //Instruction 2657
    //MUL
    t16_13 = t16_13 * t16_13;
    //Instruction 2658
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2659
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 2660
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2661
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 2662
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2663
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2664
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 2665
    //MUL
    t16_0.x = t16_0.x * t16_13;
    //Instruction 2666
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2667
    //MUL
    t16_0.x = t16_0.x * t16_12;
    //Instruction 2668
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 2669
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 2670
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 2671
    //SAMPLE
    t10_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2672
    //MAD
    t16_4.xyz = _Color.xyz * t10_2.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2673
    //MUL
    t16_2.xzw = t10_2.xzw * _Color.xyz;
    //Instruction 2674
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2675
    //MUL
    t16_0.xyz = t16_4.xyz * t16_0.xxx;
    //Instruction 2676
    //MAD
    t16_12 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2677
    //MAD
    t16_0.xyz = t16_2.xzw * vec3(t16_12) + t16_0.xyz;
    //Instruction 2678
    //SAMPLE
    t10_2.x = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 2679
    //MUL
    t16_1.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 2680
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2681
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_0.xyz;
    //Instruction 2682
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2683
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 5043
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5044
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5045
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5046
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5047
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5048
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5049
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5050
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5051
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5052
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5053
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5054
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5055
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5056
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5057
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 5058
    //MOV
    t1.w = t0.x;
    //Instruction 5059
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5060
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 5061
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 5062
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 5063
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 5064
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 5065
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 5066
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5067
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5068
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5069
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5070
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5071
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5072
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5073
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5074
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5075
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5076
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5077
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 5078
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 5079
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 5080
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 5081
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 5082
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5083
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 5084
    //MOV
    t2.w = t0.z;
    //Instruction 5085
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 5086
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 5087
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 5088
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 5089
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 5090
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5091
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 5092
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 5093
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 5094
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 5095
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 5096
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 5097
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 5098
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 5099
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 5100
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 5101
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 5102
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 5103
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 5104
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 5105
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 5106
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 5107
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 5108
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 5109
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 5110
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 5111
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 5112
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 5113
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 5114
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 5115
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5116
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_7;
bool tb7;
mediump float t16_9;
mediump float t16_13;
mediump float t16_18;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 4975
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 4976
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.5, 0.5);
    //Instruction 4977
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 4978
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 4979
    //MOVC
    t10_2 = (tb7) ? 1.0 : 0.0;
    //Instruction 4980
    //MUL
    t10_2 = t10_1.x * t10_2;
    //Instruction 4981
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 4982
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 4983
    //MUL
    t10_2 = t10_1.x * t10_2;
    //Instruction 4984
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 4985
    //SAMPLE_C_LZ
    vec3 txVec17 = vec3(t16_1.xy,t16_1.z);
    t10_1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec17, 0.0);
    //Instruction 4986
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4987
    //MAD
    t16_0.x = t10_1.x * t16_0.x + _LightShadowData.x;
    //Instruction 4988
    //MUL
    t10_2 = t16_0.x * t10_2;
    //Instruction 4989
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 4990
    //DP3
    t16_18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 4991
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 4992
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 4993
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 4994
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 4995
    //DP3
    t16_21 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4996
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 4997
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 4998
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_18) + t16_3.xyz;
    //Instruction 4999
    //DP3
    t16_18 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 5000
    //MAX
    t16_1.x = max(t16_18, 0.00100000005);
    //Instruction 5001
    //RSQ
    t16_18 = inversesqrt(t16_1.x);
    //Instruction 5002
    //MUL
    t16_4.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 5003
    //DP3
    t16_18 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 5004
    //MAX
    t16_1.x = max(t16_18, 0.0);
    //Instruction 5005
    //MUL
    t16_18 = t16_1.x * t16_1.x;
    //Instruction 5006
    //ADD
    t16_21 = (-_Glossiness) + 1.0;
    //Instruction 5007
    //MUL
    t16_22 = t16_21 * t16_21;
    //Instruction 5008
    //ADD
    t16_21 = (-t16_21) + 1.0;
    //Instruction 5009
    //MAD
    t16_21 = t16_21 * 0.967999995 + 0.0299999993;
    //Instruction 5010
    //LOG
    t16_21 = log2(t16_21);
    //Instruction 5011
    //DIV
    t16_21 = 10.0 / t16_21;
    //Instruction 5012
    //MAX
    t16_21 = max(t16_21, -255.936996);
    //Instruction 5013
    //MAD
    t16_18 = t16_18 * _Glossiness + t16_22;
    //Instruction 5014
    //MUL
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    //Instruction 5015
    //MAD
    t16_1.x = t16_18 * t16_1.x + 9.99999975e-005;
    //Instruction 5016
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5017
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 5018
    //MUL
    t16_5.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 5019
    //DP3
    t16_18 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 5020
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 5021
    //MAX
    t16_7 = max(t16_3.x, 0.0);
    //Instruction 5022
    //MAX
    t16_13 = max(t16_18, 0.0);
    //Instruction 5023
    //LOG
    t16_18 = log2(t16_13);
    //Instruction 5024
    //MUL
    t16_3.x = t16_21 * t16_21;
    //Instruction 5025
    //MAD
    t16_9 = t16_21 * t16_21 + 1.0;
    //Instruction 5026
    //MUL
    t16_18 = t16_18 * t16_3.x;
    //Instruction 5027
    //EXP
    t16_18 = exp2(t16_18);
    //Instruction 5028
    //MUL
    t16_18 = t16_18 * t16_9;
    //Instruction 5029
    //DIV
    t16_1.x = t16_18 / t16_1.x;
    //Instruction 5030
    //MAX
    t16_18 = max(t16_1.x, 0.0);
    //Instruction 5031
    //MIN
    t16_18 = min(t16_18, 100.0);
    //Instruction 5032
    //SAMPLE
    t10_1.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5033
    //MAD
    t16_3.xyz = _Color.xyz * t10_1.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5034
    //MUL
    t16_1.xzw = t10_1.xzw * _Color.xyz;
    //Instruction 5035
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5036
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 5037
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5038
    //MAD
    t16_3.xyz = t16_1.xzw * vec3(t16_18) + t16_3.xyz;
    //Instruction 5039
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 5040
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_0.xyz;
    //Instruction 5041
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5042
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 2806
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2807
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2808
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2809
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2810
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2811
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2812
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2813
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2814
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2815
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2816
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2817
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2818
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2819
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2820
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2821
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 2822
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 2823
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 2824
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2825
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 2826
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2827
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 2828
    //MOV
    t1.w = t2.x;
    //Instruction 2829
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2830
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2831
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2832
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2833
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2834
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2835
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2836
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2837
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2838
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2839
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2840
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 2841
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 2842
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2843
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 2844
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 2845
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2846
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2847
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 2848
    //MOV
    t0.w = t2.z;
    //Instruction 2849
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 2850
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2851
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2852
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2853
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2854
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2855
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2856
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2857
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2858
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2859
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2860
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2861
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2862
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2863
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2864
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2865
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2866
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2867
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2868
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2869
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump vec3 t16_1;
highp float t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_8;
highp float t10;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 2742
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2743
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2744
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2745
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2746
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2747
    //DP3
    t16_4.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2748
    //RSQ
    t16_4.x = inversesqrt(t16_4.x);
    //Instruction 2749
    //MUL
    t16_4.xyz = t16_4.xxx * t16_1.xyz;
    //Instruction 2750
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_4.xyz;
    //Instruction 2751
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 2752
    //MAX
    t16_2.x = max(t16_0.x, 0.00100000005);
    //Instruction 2753
    //RSQ
    t16_0.x = inversesqrt(t16_2.x);
    //Instruction 2754
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 2755
    //DP3
    t16_0.x = dot(t16_4.xyz, t16_1.xyz);
    //Instruction 2756
    //MAX
    t16_2.x = max(t16_0.x, 0.0);
    //Instruction 2757
    //MUL
    t16_0.x = t16_2.x * t16_2.x;
    //Instruction 2758
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 2759
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 2760
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 2761
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 2762
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 2763
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 2764
    //MAX
    t16_13 = max(t16_13, -255.936996);
    //Instruction 2765
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 2766
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 2767
    //MAD
    t16_2.x = t16_0.x * t16_2.x + 9.99999975e-005;
    //Instruction 2768
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2769
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2770
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2771
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2772
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 2773
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2774
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 2775
    //MUL
    t16_4.x = t16_13 * t16_13;
    //Instruction 2776
    //MAD
    t16_8 = t16_13 * t16_13 + 1.0;
    //Instruction 2777
    //MUL
    t16_0.x = t16_0.x * t16_4.x;
    //Instruction 2778
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2779
    //MUL
    t16_0.x = t16_0.x * t16_8;
    //Instruction 2780
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 2781
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 2782
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 2783
    //SAMPLE
    t10_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2784
    //MAD
    t16_4.xyz = _Color.xyz * t10_2.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2785
    //MUL
    t16_2.xzw = t10_2.xzw * _Color.xyz;
    //Instruction 2786
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2787
    //MUL
    t16_0.xyz = t16_4.xyz * t16_0.xxx;
    //Instruction 2788
    //MAD
    t16_12 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2789
    //MAD
    t16_0.xyz = t16_2.xzw * vec3(t16_12) + t16_0.xyz;
    //Instruction 2790
    //DP3
    t2 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 2791
    //SQRT
    t2 = sqrt(t2);
    //Instruction 2792
    //MUL
    t2 = t2 * _LightPositionRange.w;
    //Instruction 2793
    //MUL
    t2 = t2 * 0.970000029;
    //Instruction 2794
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 2795
    //DP4
    t10 = dot(t1, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 2796
    //LT
    tb2 = t10<t2;
    //Instruction 2797
    //MOVC
    t16_12 = (tb2) ? _LightShadowData.x : 1.0;
    //Instruction 2798
    //DP3
    t2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2799
    //SAMPLE
    t10_2.x = texture(_LightTexture0, vec2(t2)).w;
    //Instruction 2800
    //MUL
    t16_2.x = t16_12 * t10_2.x;
    //Instruction 2801
    //MUL
    t16_3.xyz = t16_2.xxx * _LightColor0.xyz;
    //Instruction 2802
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 2803
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_0.xyz;
    //Instruction 2804
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2805
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5183
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5184
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5185
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5186
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5187
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5188
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5189
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5190
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5191
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5192
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5193
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5194
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5195
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5196
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 5197
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5198
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 5199
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 5200
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 5201
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5202
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 5203
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5204
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 5205
    //MOV
    t1.w = t2.x;
    //Instruction 5206
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 5207
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5208
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5209
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5210
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5211
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5212
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5213
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 5214
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5215
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5216
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5217
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 5218
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 5219
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5220
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 5221
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 5222
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 5223
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5224
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 5225
    //MOV
    t0.w = t2.z;
    //Instruction 5226
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 5227
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 5228
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 5229
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 5230
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 5231
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5232
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 5233
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 5234
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 5235
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 5236
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 5237
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 5238
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 5239
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 5240
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 5241
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 5242
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 5243
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 5244
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 5245
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 5246
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump vec3 t16_1;
highp float t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_8;
highp float t10;
lowp float t10_10;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 5117
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 5118
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5119
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 5120
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 5121
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 5122
    //DP3
    t16_4.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 5123
    //RSQ
    t16_4.x = inversesqrt(t16_4.x);
    //Instruction 5124
    //MUL
    t16_4.xyz = t16_4.xxx * t16_1.xyz;
    //Instruction 5125
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_4.xyz;
    //Instruction 5126
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 5127
    //MAX
    t16_2.x = max(t16_0.x, 0.00100000005);
    //Instruction 5128
    //RSQ
    t16_0.x = inversesqrt(t16_2.x);
    //Instruction 5129
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 5130
    //DP3
    t16_0.x = dot(t16_4.xyz, t16_1.xyz);
    //Instruction 5131
    //MAX
    t16_2.x = max(t16_0.x, 0.0);
    //Instruction 5132
    //MUL
    t16_0.x = t16_2.x * t16_2.x;
    //Instruction 5133
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 5134
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 5135
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 5136
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 5137
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 5138
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 5139
    //MAX
    t16_13 = max(t16_13, -255.936996);
    //Instruction 5140
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 5141
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 5142
    //MAD
    t16_2.x = t16_0.x * t16_2.x + 9.99999975e-005;
    //Instruction 5143
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5144
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5145
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5146
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 5147
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 5148
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 5149
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 5150
    //MUL
    t16_4.x = t16_13 * t16_13;
    //Instruction 5151
    //MAD
    t16_8 = t16_13 * t16_13 + 1.0;
    //Instruction 5152
    //MUL
    t16_0.x = t16_0.x * t16_4.x;
    //Instruction 5153
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 5154
    //MUL
    t16_0.x = t16_0.x * t16_8;
    //Instruction 5155
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 5156
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 5157
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 5158
    //SAMPLE
    t10_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5159
    //MAD
    t16_4.xyz = _Color.xyz * t10_2.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5160
    //MUL
    t16_2.xzw = t10_2.xzw * _Color.xyz;
    //Instruction 5161
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5162
    //MUL
    t16_0.xyz = t16_4.xyz * t16_0.xxx;
    //Instruction 5163
    //MAD
    t16_12 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5164
    //MAD
    t16_0.xyz = t16_2.xzw * vec3(t16_12) + t16_0.xyz;
    //Instruction 5165
    //DP3
    t2 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 5166
    //SQRT
    t2 = sqrt(t2);
    //Instruction 5167
    //MUL
    t2 = t2 * _LightPositionRange.w;
    //Instruction 5168
    //MUL
    t2 = t2 * 0.970000029;
    //Instruction 5169
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 5170
    //DP4
    t10 = dot(t1, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 5171
    //LT
    tb2 = t10<t2;
    //Instruction 5172
    //MOVC
    t16_12 = (tb2) ? _LightShadowData.x : 1.0;
    //Instruction 5173
    //DP3
    t2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5174
    //SAMPLE
    t10_2.x = texture(_LightTextureB0, vec2(t2)).w;
    //Instruction 5175
    //SAMPLE
    t10_10 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 5176
    //MUL
    t16_2.x = t10_10 * t10_2.x;
    //Instruction 5177
    //MUL
    t16_2.x = t16_12 * t16_2.x;
    //Instruction 5178
    //MUL
    t16_3.xyz = t16_2.xxx * _LightColor0.xyz;
    //Instruction 5179
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 5180
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_0.xyz;
    //Instruction 5181
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5182
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2946
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2947
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2948
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2949
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2950
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2951
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2952
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2953
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2954
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2955
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2956
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2957
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2958
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2959
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2960
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2961
    //MOV
    t1.w = t0.x;
    //Instruction 2962
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2963
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2964
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2965
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2966
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2967
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2968
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2969
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2970
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2971
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2972
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2973
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2974
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2975
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2976
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2977
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2978
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2979
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2980
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2981
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2982
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2983
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2984
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2985
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2986
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2987
    //MOV
    t2.w = t0.z;
    //Instruction 2988
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2989
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2990
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2991
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2992
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2993
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2994
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2995
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2996
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2997
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 2998
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 2999
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 3000
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 3001
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 3002
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 3003
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 3004
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 3005
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 3006
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 3007
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 3008
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 3009
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 3010
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 3011
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 3012
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 3013
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3014
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 3015
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 3016
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 3017
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 3018
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 3019
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_9;
lowp float t10_9;
mediump float t16_13;
mediump float t16_17;
bool tb17;
mediump float t16_24;
mediump float t16_29;
mediump float t16_30;
void main()
{
    //Instruction 2870
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2871
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 2872
    //ADD
    t2.xyz = t16_1.xyz + _ShadowOffsets[0].xyz;
    //Instruction 2873
    //SAMPLE_C_LZ
    vec3 txVec12 = vec3(t2.xy,t2.z);
    t2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    //Instruction 2874
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[1].xyz;
    //Instruction 2875
    //SAMPLE_C_LZ
    vec3 txVec13 = vec3(t3.xy,t3.z);
    t2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    //Instruction 2876
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[2].xyz;
    //Instruction 2877
    //ADD
    t1.xyz = t16_1.xyz + _ShadowOffsets[3].xyz;
    //Instruction 2878
    //SAMPLE_C_LZ
    vec3 txVec14 = vec3(t1.xy,t1.z);
    t2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    //Instruction 2879
    //SAMPLE_C_LZ
    vec3 txVec15 = vec3(t3.xy,t3.z);
    t2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    //Instruction 2880
    //MAD
    t16_0 = t2 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 2881
    //DP4
    t16_1.x = dot(t16_0, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 2882
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 2883
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.5, 0.5);
    //Instruction 2884
    //SAMPLE
    t10_9 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 2885
    //LT
    tb17 = 0.0<vs_TEXCOORD5.z;
    //Instruction 2886
    //MOVC
    t10_4 = (tb17) ? 1.0 : 0.0;
    //Instruction 2887
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 2888
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2889
    //SAMPLE
    t10_9 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 2890
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 2891
    //MUL
    t10_4 = t16_1.x * t10_4;
    //Instruction 2892
    //MUL
    t16_0.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 2893
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2894
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 2895
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 2896
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 2897
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 2898
    //DP3
    t16_29 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 2899
    //RSQ
    t16_29 = inversesqrt(t16_29);
    //Instruction 2900
    //MUL
    t16_5.xyz = vec3(t16_29) * t16_5.xyz;
    //Instruction 2901
    //MAD
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_5.xyz;
    //Instruction 2902
    //DP3
    t16_24 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 2903
    //MAX
    t16_1.x = max(t16_24, 0.00100000005);
    //Instruction 2904
    //RSQ
    t16_24 = inversesqrt(t16_1.x);
    //Instruction 2905
    //MUL
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    //Instruction 2906
    //DP3
    t16_24 = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 2907
    //MAX
    t16_1.x = max(t16_24, 0.0);
    //Instruction 2908
    //MUL
    t16_24 = t16_1.x * t16_1.x;
    //Instruction 2909
    //ADD
    t16_29 = (-_Glossiness) + 1.0;
    //Instruction 2910
    //MUL
    t16_30 = t16_29 * t16_29;
    //Instruction 2911
    //ADD
    t16_29 = (-t16_29) + 1.0;
    //Instruction 2912
    //MAD
    t16_29 = t16_29 * 0.967999995 + 0.0299999993;
    //Instruction 2913
    //LOG
    t16_29 = log2(t16_29);
    //Instruction 2914
    //DIV
    t16_29 = 10.0 / t16_29;
    //Instruction 2915
    //MAX
    t16_29 = max(t16_29, -255.936996);
    //Instruction 2916
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_30;
    //Instruction 2917
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2918
    //MAD
    t16_1.x = t16_24 * t16_1.x + 9.99999975e-005;
    //Instruction 2919
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2920
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 2921
    //MUL
    t16_7.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 2922
    //DP3
    t16_24 = dot(t16_7.xyz, t16_6.xyz);
    //Instruction 2923
    //DP3
    t16_5.x = dot(t16_7.xyz, t16_5.xyz);
    //Instruction 2924
    //MAX
    t16_9 = max(t16_5.x, 0.0);
    //Instruction 2925
    //MAX
    t16_17 = max(t16_24, 0.0);
    //Instruction 2926
    //LOG
    t16_24 = log2(t16_17);
    //Instruction 2927
    //MUL
    t16_5.x = t16_29 * t16_29;
    //Instruction 2928
    //MAD
    t16_13 = t16_29 * t16_29 + 1.0;
    //Instruction 2929
    //MUL
    t16_24 = t16_24 * t16_5.x;
    //Instruction 2930
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 2931
    //MUL
    t16_24 = t16_24 * t16_13;
    //Instruction 2932
    //DIV
    t16_1.x = t16_24 / t16_1.x;
    //Instruction 2933
    //MAX
    t16_24 = max(t16_1.x, 0.0);
    //Instruction 2934
    //MIN
    t16_24 = min(t16_24, 100.0);
    //Instruction 2935
    //SAMPLE
    t10_1.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2936
    //MAD
    t16_5.xyz = _Color.xyz * t10_1.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2937
    //MUL
    t16_1.xzw = t10_1.xzw * _Color.xyz;
    //Instruction 2938
    //MAD
    t16_5.xyz = vec3(_Metallic) * t16_5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2939
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 2940
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2941
    //MAD
    t16_5.xyz = t16_1.xzw * vec3(t16_24) + t16_5.xyz;
    //Instruction 2942
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 2943
    //MUL
    SV_Target0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 2944
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2945
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5323
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5324
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5325
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5326
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5327
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5328
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5329
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5330
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5331
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5332
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5333
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5334
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5335
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5336
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 5337
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5338
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 5339
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 5340
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 5341
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5342
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 5343
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5344
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 5345
    //MOV
    t1.w = t2.x;
    //Instruction 5346
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 5347
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5348
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5349
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5350
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5351
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5352
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5353
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 5354
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5355
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5356
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5357
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 5358
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 5359
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5360
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 5361
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 5362
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 5363
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5364
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 5365
    //MOV
    t0.w = t2.z;
    //Instruction 5366
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 5367
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 5368
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 5369
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 5370
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 5371
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5372
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 5373
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 5374
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 5375
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 5376
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 5377
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 5378
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 5379
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 5380
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 5381
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 5382
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 5383
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 5384
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 5385
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 5386
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bvec4 tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 5247
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 5248
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 5249
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 5250
    //MUL
    t0.x = t0.x * 0.970000029;
    //Instruction 5251
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 5252
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 5253
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 5254
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 5255
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 5256
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 5257
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 5258
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 5259
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 5260
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 5261
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 5262
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 5263
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 5264
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 5265
    //DP4
    t16_3.x = dot(t0, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 5266
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5267
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t0.xx).w;
    //Instruction 5268
    //MUL
    t16_0.x = t16_3.x * t10_0.x;
    //Instruction 5269
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 5270
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 5271
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 5272
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 5273
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 5274
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 5275
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 5276
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 5277
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 5278
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 5279
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 5280
    //MAX
    t16_0.x = max(t16_24, 0.00100000005);
    //Instruction 5281
    //RSQ
    t16_24 = inversesqrt(t16_0.x);
    //Instruction 5282
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 5283
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 5284
    //MAX
    t16_0.x = max(t16_24, 0.0);
    //Instruction 5285
    //MUL
    t16_24 = t16_0.x * t16_0.x;
    //Instruction 5286
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 5287
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 5288
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 5289
    //MAD
    t16_25 = t16_25 * 0.967999995 + 0.0299999993;
    //Instruction 5290
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 5291
    //DIV
    t16_25 = 10.0 / t16_25;
    //Instruction 5292
    //MAX
    t16_25 = max(t16_25, -255.936996);
    //Instruction 5293
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 5294
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 5295
    //MAD
    t16_0.x = t16_24 * t16_0.x + 9.99999975e-005;
    //Instruction 5296
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5297
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 5298
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 5299
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 5300
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 5301
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 5302
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 5303
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 5304
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 5305
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 5306
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 5307
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 5308
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 5309
    //DIV
    t16_0.x = t16_24 / t16_0.x;
    //Instruction 5310
    //MAX
    t16_24 = max(t16_0.x, 0.0);
    //Instruction 5311
    //MIN
    t16_24 = min(t16_24, 100.0);
    //Instruction 5312
    //SAMPLE
    t10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5313
    //MAD
    t16_4.xyz = _Color.xyz * t10_0.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5314
    //MUL
    t16_0.xzw = t10_0.xzw * _Color.xyz;
    //Instruction 5315
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5316
    //MUL
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    //Instruction 5317
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5318
    //MAD
    t16_4.xyz = t16_0.xzw * vec3(t16_24) + t16_4.xyz;
    //Instruction 5319
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 5320
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 5321
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5322
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3098
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3099
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3100
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3101
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3102
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3103
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3104
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3105
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3106
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3107
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3108
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3109
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3110
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3111
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3112
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3113
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 3114
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 3115
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3116
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3117
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3118
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3119
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 3120
    //MOV
    t1.w = t2.x;
    //Instruction 3121
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3122
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3123
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3124
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3125
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3126
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3127
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3128
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3129
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3130
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3131
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3132
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 3133
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3134
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3135
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3136
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 3137
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3138
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3139
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 3140
    //MOV
    t0.w = t2.z;
    //Instruction 3141
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 3142
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3143
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3144
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3145
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3146
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3147
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3148
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3149
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3150
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3151
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3152
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3153
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3154
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3155
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3156
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3157
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3158
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3159
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3160
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3161
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bvec4 tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 3020
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 3021
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3022
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 3023
    //MUL
    t0.x = t0.x * 0.970000029;
    //Instruction 3024
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 3025
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3026
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 3027
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 3028
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3029
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 3030
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 3031
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3032
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 3033
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 3034
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 3035
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 3036
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 3037
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 3038
    //DP4
    t16_3.x = dot(t0, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 3039
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3040
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, t0.xx).w;
    //Instruction 3041
    //SAMPLE
    t10_7 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 3042
    //MUL
    t16_0.x = t10_7 * t10_0.x;
    //Instruction 3043
    //MUL
    t16_0.x = t16_3.x * t16_0.x;
    //Instruction 3044
    //MUL
    t16_3.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3045
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3046
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3047
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 3048
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 3049
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 3050
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3051
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 3052
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 3053
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 3054
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3055
    //MAX
    t16_0.x = max(t16_24, 0.00100000005);
    //Instruction 3056
    //RSQ
    t16_24 = inversesqrt(t16_0.x);
    //Instruction 3057
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 3058
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 3059
    //MAX
    t16_0.x = max(t16_24, 0.0);
    //Instruction 3060
    //MUL
    t16_24 = t16_0.x * t16_0.x;
    //Instruction 3061
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 3062
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 3063
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 3064
    //MAD
    t16_25 = t16_25 * 0.967999995 + 0.0299999993;
    //Instruction 3065
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 3066
    //DIV
    t16_25 = 10.0 / t16_25;
    //Instruction 3067
    //MAX
    t16_25 = max(t16_25, -255.936996);
    //Instruction 3068
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 3069
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 3070
    //MAD
    t16_0.x = t16_24 * t16_0.x + 9.99999975e-005;
    //Instruction 3071
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3072
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3073
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 3074
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 3075
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 3076
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 3077
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 3078
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 3079
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 3080
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 3081
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 3082
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 3083
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 3084
    //DIV
    t16_0.x = t16_24 / t16_0.x;
    //Instruction 3085
    //MAX
    t16_24 = max(t16_0.x, 0.0);
    //Instruction 3086
    //MIN
    t16_24 = min(t16_24, 100.0);
    //Instruction 3087
    //SAMPLE
    t10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3088
    //MAD
    t16_4.xyz = _Color.xyz * t10_0.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3089
    //MUL
    t16_0.xzw = t10_0.xzw * _Color.xyz;
    //Instruction 3090
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3091
    //MUL
    t16_4.xyz = vec3(t16_24) * t16_4.xyz;
    //Instruction 3092
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3093
    //MAD
    t16_4.xyz = t16_0.xzw * vec3(t16_24) + t16_4.xyz;
    //Instruction 3094
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 3095
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 3096
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3097
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 3215
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3216
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3217
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3218
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3219
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3220
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3221
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3222
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3223
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3224
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3225
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3226
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3227
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3228
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3229
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 3230
    //MOV
    t1.w = t0.x;
    //Instruction 3231
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3232
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 3233
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 3234
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3235
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3236
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 3237
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3238
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3239
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3240
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3241
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3242
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3243
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3244
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3245
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3246
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3247
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3248
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 3249
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 3250
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3251
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 3252
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 3253
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 3254
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3255
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3256
    //MOV
    t2.w = t0.z;
    //Instruction 3257
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3258
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3259
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3260
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3261
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3262
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3263
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3264
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3265
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3266
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3267
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 3162
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3163
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 3164
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 3165
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 3166
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 3167
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 3168
    //DP3
    t16_12 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 3169
    //MAX
    t16_2.x = max(t16_12, 0.00100000005);
    //Instruction 3170
    //RSQ
    t16_12 = inversesqrt(t16_2.x);
    //Instruction 3171
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 3172
    //DP3
    t16_12 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 3173
    //MAX
    t16_2.x = max(t16_12, 0.0);
    //Instruction 3174
    //MUL
    t16_12 = t16_2.x * t16_2.x;
    //Instruction 3175
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 3176
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 3177
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 3178
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 3179
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 3180
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 3181
    //MAX
    t16_13 = max(t16_13, -255.936996);
    //Instruction 3182
    //MAD
    t16_12 = t16_12 * _Glossiness + t16_3.x;
    //Instruction 3183
    //MUL
    t16_12 = t16_12 * unity_LightGammaCorrectionConsts.z;
    //Instruction 3184
    //MAD
    t16_2.x = t16_12 * t16_2.x + 9.99999975e-005;
    //Instruction 3185
    //MAD
    t16_12 = t16_13 * t16_13 + 1.0;
    //Instruction 3186
    //MUL
    t16_13 = t16_13 * t16_13;
    //Instruction 3187
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3188
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 3189
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 3190
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 3191
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 3192
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 3193
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 3194
    //MUL
    t16_0.x = t16_0.x * t16_13;
    //Instruction 3195
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 3196
    //MUL
    t16_0.x = t16_0.x * t16_12;
    //Instruction 3197
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 3198
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 3199
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 3200
    //SAMPLE
    t10_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3201
    //MAD
    t16_4.xyz = _Color.xyz * t10_2.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3202
    //MUL
    t16_2.xzw = t10_2.xzw * _Color.xyz;
    //Instruction 3203
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3204
    //MUL
    t16_0.xyz = t16_4.xyz * t16_0.xxx;
    //Instruction 3205
    //MAD
    t16_12 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3206
    //MAD
    t16_0.xyz = t16_2.xzw * vec3(t16_12) + t16_0.xyz;
    //Instruction 3207
    //SAMPLE_C_LZ
    vec3 txVec16 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec16, 0.0);
    //Instruction 3208
    //ADD
    t16_1.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3209
    //MAD
    t16_12 = t16_12 * t16_1.x + _LightShadowData.x;
    //Instruction 3210
    //MUL
    t16_1.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 3211
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 3212
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_0.xyz;
    //Instruction 3213
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3214
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 5442
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5443
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5444
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5445
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5446
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5447
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5448
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5449
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5450
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5451
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5452
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5453
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5454
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5455
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5456
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 5457
    //MOV
    t1.w = t0.x;
    //Instruction 5458
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5459
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 5460
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 5461
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 5462
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 5463
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 5464
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 5465
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5466
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5467
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5468
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5469
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5470
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5471
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5472
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5473
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5474
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5475
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 5476
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 5477
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 5478
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 5479
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 5480
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 5481
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5482
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 5483
    //MOV
    t2.w = t0.z;
    //Instruction 5484
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 5485
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 5486
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 5487
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 5488
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 5489
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5490
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 5491
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 5492
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 5493
    //DP4
    t2.x = dot(t16_0, t1);
    //Instruction 5494
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 5495
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 5496
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 5497
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 5498
    //DP4
    t2.y = dot(t16_0, t1);
    //Instruction 5499
    //MOV
    vs_TEXCOORD5.xy = t2.xy;
    //Instruction 5500
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 5501
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 5502
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 5503
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 5504
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 5505
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 5387
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 5388
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5389
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 5390
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 5391
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 5392
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 5393
    //DP3
    t16_12 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 5394
    //MAX
    t16_2.x = max(t16_12, 0.00100000005);
    //Instruction 5395
    //RSQ
    t16_12 = inversesqrt(t16_2.x);
    //Instruction 5396
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 5397
    //DP3
    t16_12 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 5398
    //MAX
    t16_2.x = max(t16_12, 0.0);
    //Instruction 5399
    //MUL
    t16_12 = t16_2.x * t16_2.x;
    //Instruction 5400
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 5401
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 5402
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 5403
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 5404
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 5405
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 5406
    //MAX
    t16_13 = max(t16_13, -255.936996);
    //Instruction 5407
    //MAD
    t16_12 = t16_12 * _Glossiness + t16_3.x;
    //Instruction 5408
    //MUL
    t16_12 = t16_12 * unity_LightGammaCorrectionConsts.z;
    //Instruction 5409
    //MAD
    t16_2.x = t16_12 * t16_2.x + 9.99999975e-005;
    //Instruction 5410
    //MAD
    t16_12 = t16_13 * t16_13 + 1.0;
    //Instruction 5411
    //MUL
    t16_13 = t16_13 * t16_13;
    //Instruction 5412
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5413
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 5414
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5415
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 5416
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 5417
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 5418
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 5419
    //MUL
    t16_0.x = t16_0.x * t16_13;
    //Instruction 5420
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 5421
    //MUL
    t16_0.x = t16_0.x * t16_12;
    //Instruction 5422
    //DIV
    t16_2.x = t16_0.x / t16_2.x;
    //Instruction 5423
    //MAX
    t16_0.x = max(t16_2.x, 0.0);
    //Instruction 5424
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 5425
    //SAMPLE
    t10_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5426
    //MAD
    t16_4.xyz = _Color.xyz * t10_2.xzw + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5427
    //MUL
    t16_2.xzw = t10_2.xzw * _Color.xyz;
    //Instruction 5428
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5429
    //MUL
    t16_0.xyz = t16_4.xyz * t16_0.xxx;
    //Instruction 5430
    //MAD
    t16_12 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5431
    //MAD
    t16_0.xyz = t16_2.xzw * vec3(t16_12) + t16_0.xyz;
    //Instruction 5432
    //SAMPLE_C_LZ
    vec3 txVec18 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec18, 0.0);
    //Instruction 5433
    //ADD
    t16_1.x = (-_LightShadowData.x) + 1.0;
    //Instruction 5434
    //MAD
    t16_12 = t16_12 * t16_1.x + _LightShadowData.x;
    //Instruction 5435
    //SAMPLE
    t10_2.x = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 5436
    //MUL
    t16_2.x = t16_12 * t10_2.x;
    //Instruction 5437
    //MUL
    t16_1.xyz = t16_2.xxx * _LightColor0.xyz;
    //Instruction 5438
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 5439
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_0.xyz;
    //Instruction 5440
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5441
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 133839
Program "vp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t6;
highp float t9;
void main()
{
    //Instruction 3270
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3271
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3272
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3273
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3274
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3275
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3276
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3277
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3278
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3279
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3280
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3281
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 3282
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 3283
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 3284
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3285
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 3286
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 3287
    //ADD
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 3288
    //MAD
    t2.xyz = (-t1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3289
    //DP3
    t9 = dot(t2.xyz, t2.xyz);
    //Instruction 3290
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 3291
    //MUL
    t2.xyz = vec3(t9) * t2.xyz;
    //Instruction 3292
    //DP3
    t9 = dot(t0.xyz, t2.xyz);
    //Instruction 3293
    //MAD
    t9 = (-t9) * t9 + 1.0;
    //Instruction 3294
    //SQRT
    t9 = sqrt(t9);
    //Instruction 3295
    //MUL
    t9 = t9 * unity_LightShadowBias.z;
    //Instruction 3296
    //MAD
    t0.xyz = (-t0.xyz) * vec3(t9) + t1.xyz;
    //Instruction 3297
    //MUL
    t1 = t0.yyyy * unity_MatrixVP[1];
    //Instruction 3298
    //MAD
    t1 = unity_MatrixVP[0] * t0.xxxx + t1;
    //Instruction 3299
    //MAD
    t0 = unity_MatrixVP[2] * t0.zzzz + t1;
    //Instruction 3300
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 3301
    //MUL
    t1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3302
    //MAD
    t1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t1;
    //Instruction 3303
    //MAD
    t1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t1;
    //Instruction 3304
    //ADD
    t1 = t1 + glstate_matrix_mvp[3];
    //Instruction 3305
    //NE
    tb2 = unity_LightShadowBias.z!=0.0;
    //Instruction 3306
    //MOVC
    t0 = (bool(tb2)) ? t0 : t1;
    //Instruction 3307
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 3308
    //ADD
    t6 = t0.z + t1.x;
    //Instruction 3309
    //MAX
    t1.x = max((-t0.w), t6);
    //Instruction 3310
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 3311
    //ADD
    t0.x = (-t6) + t1.x;
    //Instruction 3312
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t0.x + t6;
    //Instruction 3313
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    //Instruction 3268
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3269
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
void main()
{
    //Instruction 5515
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5516
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5517
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5518
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5519
    //ADD
    vs_TEXCOORD0.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 5520
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5521
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5522
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5523
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5524
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 5506
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 5507
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 5508
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 5509
    //MIN
    t0.x = min(t0.x, 0.999000013);
    //Instruction 5510
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    //Instruction 5511
    //FRC
    t0 = fract(t0);
    //Instruction 5512
    //MAD
    t0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    //Instruction 5513
    //MOV
    SV_Target0 = t0;
    //Instruction 5514
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 200435
Program "vp" {
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 3365
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3366
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3367
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3368
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3369
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3370
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3371
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3372
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3373
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3374
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3375
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3376
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3377
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3378
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3379
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3380
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3381
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3382
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3383
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3384
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3385
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3386
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3387
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3388
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3389
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3390
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3391
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3392
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 3393
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 3394
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 3395
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 3396
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 3397
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 3398
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 3399
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 3400
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 3401
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 3402
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 3403
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 3404
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 3405
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 3314
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 3315
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 3316
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 3317
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3318
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 3319
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3320
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3321
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3322
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 3323
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 3324
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 3325
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 3326
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3327
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 3328
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 3329
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3330
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 3331
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 3332
    //MOV
    t16_2.w = 1.0;
    //Instruction 3333
    //MAD
    SV_Target2 = t16_2 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
    //Instruction 3334
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 3335
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 3336
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 3337
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 3338
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 3339
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 3340
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 3341
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 3342
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 3343
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 3344
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 3345
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 3346
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 3347
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 3348
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 3349
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 3350
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 3351
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 3352
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 3353
    //MUL
    t16_22 = t16_22 * 0.75;
    //Instruction 3354
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 3355
    //MUL
    t16_22 = t16_22 * 7.0;
    //Instruction 3356
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 3357
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 3358
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 3359
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 3360
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 3361
    //MAD
    t16_1.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 3362
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 3363
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 3364
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 5575
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5576
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5577
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5578
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5579
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5580
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5581
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5582
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5583
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5584
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5585
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5586
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5587
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5588
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 5589
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5590
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5591
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5592
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5593
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5594
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5595
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5596
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5597
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 5598
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5599
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5600
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5601
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 5602
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 5603
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 5604
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 5605
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 5606
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5607
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 5608
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 5609
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 5610
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 5611
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 5612
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 5613
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 5614
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5615
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 5525
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5526
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 5527
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 5528
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5529
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 5530
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5531
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5532
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5533
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 5534
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 5535
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 5536
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 5537
    //MOV
    SV_Target0 = t16_0;
    //Instruction 5538
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 5539
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 5540
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5541
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 5542
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 5543
    //MOV
    t16_2.w = 1.0;
    //Instruction 5544
    //MAD
    SV_Target2 = t16_2 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
    //Instruction 5545
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 5546
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 5547
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 5548
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 5549
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 5550
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 5551
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 5552
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 5553
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 5554
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 5555
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 5556
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 5557
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 5558
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 5559
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 5560
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 5561
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 5562
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 5563
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 5564
    //MUL
    t16_22 = t16_22 * 0.75;
    //Instruction 5565
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 5566
    //MUL
    t16_22 = t16_22 * 7.0;
    //Instruction 5567
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 5568
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 5569
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 5570
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 5571
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 5572
    //MAD
    SV_Target3.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 5573
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 5574
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 150
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 374778
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 5658
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5659
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5660
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5661
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5662
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5663
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5664
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5665
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5666
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5667
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5668
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5669
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5670
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5671
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 5672
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 5673
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 5674
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5675
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5676
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5677
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5678
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5679
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5680
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5681
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5682
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 5683
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5684
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5685
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5686
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 5687
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 5688
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 5689
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 5690
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 5691
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5692
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 5693
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 5694
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 5695
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 5696
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 5697
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 5698
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 5699
    //MOV
    t0.w = 1.0;
    //Instruction 5700
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 5701
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 5702
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 5703
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 5704
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5705
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 5616
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5617
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5618
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5619
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 5620
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 5621
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 5622
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 5623
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 5624
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5625
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 5626
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 5627
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5628
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 5629
    //MUL
    t16_21 = t16_1.x * 7.0;
    //Instruction 5630
    //MUL
    t16_3 = t10_3 * 16.0;
    //Instruction 5631
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5632
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 5633
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5634
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5635
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5636
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 5637
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 5638
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 5639
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 5640
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 5641
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_9.xyz;
    //Instruction 5642
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 5643
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5644
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 5645
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 5646
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 5647
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 5648
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 5649
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 5650
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5651
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 5652
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 5653
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 5654
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 5655
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 5656
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5657
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * tmpvar_17.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_17.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_17.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_35.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_28);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 5748
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5749
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5750
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5751
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5752
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5753
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5754
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5755
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5756
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5757
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5758
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5759
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5760
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5761
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5762
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5763
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5764
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5765
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5766
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 5767
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5768
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5769
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5770
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5771
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5772
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5773
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5774
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5775
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5776
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5777
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5778
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 5779
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5780
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 5781
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5782
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 5783
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 5784
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 5785
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 5786
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 5787
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 5788
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 5789
    //MOV
    t1.w = 1.0;
    //Instruction 5790
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 5791
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 5792
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 5793
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 5794
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 5795
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 5796
    //MUL
    t3 = t3 * t3;
    //Instruction 5797
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 5798
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 5799
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 5800
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 5801
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 5802
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 5803
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 5804
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 5805
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 5806
    //MUL
    t1 = t1 * t3;
    //Instruction 5807
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 5808
    //MUL
    t0 = t0 * t1;
    //Instruction 5809
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 5810
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 5811
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 5812
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 5813
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 5814
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 5815
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 5816
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 5706
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5707
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5708
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5709
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 5710
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 5711
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 5712
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 5713
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 5714
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 5715
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 5716
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 5717
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 5718
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 5719
    //MUL
    t16_21 = t16_1.x * 7.0;
    //Instruction 5720
    //MUL
    t16_3 = t10_3 * 16.0;
    //Instruction 5721
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5722
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 5723
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5724
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5725
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5726
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 5727
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 5728
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 5729
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 5730
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 5731
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_9.xyz;
    //Instruction 5732
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 5733
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 5734
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 5735
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 5736
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 5737
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 5738
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 5739
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 5740
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 5741
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 5742
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 5743
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 5744
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 5745
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 5746
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5747
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 3452
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3453
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3454
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3455
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3456
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3457
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3458
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3459
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3460
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3461
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3462
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3463
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3464
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3465
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 3466
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 3467
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 3468
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3469
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3470
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3471
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3472
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3473
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3474
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3475
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3476
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 3477
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3478
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3479
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3480
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 3481
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 3482
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 3483
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 3484
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 3485
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 3486
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 3487
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 3488
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 3489
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 3490
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 3491
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 3492
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 3493
    //MOV
    t0.w = 1.0;
    //Instruction 3494
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 3495
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 3496
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 3497
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 3498
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 3499
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3500
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3501
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3502
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3503
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3504
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3505
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3506
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3507
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 3508
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 3406
    //SAMPLE_C_LZ
    vec3 txVec17 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec17, 0.0);
    //Instruction 3407
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 3408
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 3409
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3410
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3411
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 3412
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 3413
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 3414
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 3415
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 3416
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 3417
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3418
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3419
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 3420
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 3421
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 3422
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 3423
    //MUL
    t16_21 = t16_2.x * 7.0;
    //Instruction 3424
    //MUL
    t16_4 = t10_4 * 16.0;
    //Instruction 3425
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3426
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 3427
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3428
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3429
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3430
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 3431
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 3432
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 3433
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 3434
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 3435
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_3.xyz;
    //Instruction 3436
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3437
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 3438
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 3439
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 3440
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 3441
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 3442
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 3443
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 3444
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 3445
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 3446
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 3447
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 3448
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 3449
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 3450
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3451
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 3555
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3556
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3557
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3558
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3559
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3560
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3561
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3562
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3563
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3564
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3565
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3566
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3567
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3568
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3569
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3570
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3571
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3572
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3573
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 3574
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3575
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3576
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3577
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3578
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3579
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3580
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3581
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3582
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3583
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3584
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3585
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 3586
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3587
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 3588
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 3589
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 3590
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 3591
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 3592
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 3593
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 3594
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 3595
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 3596
    //MOV
    t1.w = 1.0;
    //Instruction 3597
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 3598
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 3599
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 3600
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 3601
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 3602
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 3603
    //MUL
    t3 = t3 * t3;
    //Instruction 3604
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 3605
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 3606
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 3607
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 3608
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 3609
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 3610
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 3611
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 3612
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 3613
    //MUL
    t1 = t1 * t3;
    //Instruction 3614
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 3615
    //MUL
    t0 = t0 * t1;
    //Instruction 3616
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 3617
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 3618
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 3619
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 3620
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 3621
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 3622
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 3623
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3624
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3625
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3626
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3627
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3628
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3629
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3630
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3631
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 3632
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 3509
    //SAMPLE_C_LZ
    vec3 txVec18 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec18, 0.0);
    //Instruction 3510
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 3511
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 3512
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3513
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3514
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 3515
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 3516
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 3517
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 3518
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 3519
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 3520
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3521
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3522
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 3523
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 3524
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 3525
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 3526
    //MUL
    t16_21 = t16_2.x * 7.0;
    //Instruction 3527
    //MUL
    t16_4 = t10_4 * 16.0;
    //Instruction 3528
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3529
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 3530
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3531
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3532
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3533
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 3534
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 3535
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 3536
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 3537
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 3538
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_3.xyz;
    //Instruction 3539
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3540
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 3541
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 3542
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 3543
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 3544
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 3545
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 3546
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 3547
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 3548
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 3549
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 3550
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 3551
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 3552
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 3553
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3554
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend [_SrcBlend] One
  GpuProgramID 456985
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTexture0, vec2(tmpvar_5));
  mediump float atten_7;
  atten_7 = tmpvar_6.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5847
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5848
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5849
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5850
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5851
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5852
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5853
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5854
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5855
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5856
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5857
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5858
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5859
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5860
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5861
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5862
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5863
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5864
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 5865
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5866
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 5867
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 5868
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5869
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5870
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5871
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 5872
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5873
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 5874
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5875
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5876
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5877
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5878
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5879
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5880
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5881
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5882
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5883
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5884
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5885
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5886
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 5887
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5888
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 5889
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5890
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5891
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5892
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5893
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 5894
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 5895
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 5896
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 5897
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 5898
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 5899
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5900
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 5901
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 5902
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 5903
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 5904
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 5905
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 5906
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 5907
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 5908
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 5909
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 5910
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 5911
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 5912
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 5913
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 5914
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp float t3;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 5817
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5818
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 5819
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 5820
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 5821
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 5822
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5823
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 5824
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 5825
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 5826
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 5827
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 5828
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 5829
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 5830
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 5831
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 5832
    //MUL
    t16_3 = t10_3 * 16.0;
    //Instruction 5833
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5834
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5835
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 5836
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5837
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 5838
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5839
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 5840
    //DP3
    t3 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5841
    //SAMPLE
    t10_3 = texture(_LightTexture0, vec2(t3)).w;
    //Instruction 5842
    //MUL
    t16_1.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 5843
    //MUL
    t16_4.xyz = t16_4.xyz * t16_1.xyz;
    //Instruction 5844
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 5845
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5846
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = _LightColor0.xyz;
  mediump vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  mediump vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_NHxRoughness, tmpvar_8);
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_9.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_5) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_11;
  xlat_varoutput_11.xyz = tmpvar_10.xyz;
  xlat_varoutput_11.w = 1.0;
  gl_FragData[0] = xlat_varoutput_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 3660
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3661
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3662
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3663
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3664
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3665
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3666
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3667
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3668
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3669
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3670
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3671
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3672
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3673
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3674
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 3675
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 3676
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 3677
    //MOV
    t1.w = t0.x;
    //Instruction 3678
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3679
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 3680
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 3681
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3682
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3683
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 3684
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3685
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3686
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3687
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3688
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3689
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3690
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3691
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3692
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3693
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3694
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3695
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3696
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3697
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3698
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 3699
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 3700
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 3701
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 3702
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3703
    //MOV
    t2.w = t0.z;
    //Instruction 3704
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3705
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 3633
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3634
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 3635
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 3636
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 3637
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 3638
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3639
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3640
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3641
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3642
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3643
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 3644
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 3645
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 3646
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 3647
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 3648
    //MUL
    t16_3 = t10_3 * 16.0;
    //Instruction 3649
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3650
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3651
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 3652
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3653
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 3654
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3655
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 3656
    //MUL
    t16_4.xyz = t16_4.xyz * _LightColor0.xyz;
    //Instruction 3657
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 3658
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3659
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_6 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].x;
  v_30.y = tangentToWorld_6[1].x;
  v_30.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].y;
  v_31.y = tangentToWorld_6[1].y;
  v_31.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].z;
  v_32.y = tangentToWorld_6[1].z;
  v_32.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_32;
  tmpvar_11 = (_LightMatrix0 * (_Object2World * _glesVertex));
  highp vec3 tmpvar_33;
  tmpvar_33 = (_WorldSpaceLightPos0.xyz - (tmpvar_12.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_34;
  n_34 = tmpvar_33;
  mediump vec3 tmpvar_35;
  tmpvar_35 = normalize(n_34);
  lightDir_5 = tmpvar_35;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  mediump vec2 P_6;
  P_6 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp vec3 LightCoord_7;
  LightCoord_7 = xlv_TEXCOORD5.xyz;
  highp float tmpvar_8;
  tmpvar_8 = dot (LightCoord_7, LightCoord_7);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTextureB0, vec2(tmpvar_8));
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  tmpvar_10 = (tmpvar_10 * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * tmpvar_5.w) * tmpvar_9.w));
  mediump vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (tmpvar_1, viewDir_11) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_12.y = (1.0 - clamp (dot (tmpvar_1, viewDir_11), 0.0, 1.0));
  mediump vec2 tmpvar_13;
  tmpvar_13.x = ((tmpvar_12 * tmpvar_12) * (tmpvar_12 * tmpvar_12)).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_NHxRoughness, tmpvar_13);
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_14.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_10) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 5952
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5953
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 5954
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 5955
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5956
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 5957
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 5958
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 5959
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5960
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5961
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 5962
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 5963
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5964
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 5965
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 5966
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 5967
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5968
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 5969
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 5970
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 5971
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 5972
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 5973
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 5974
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 5975
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 5976
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 5977
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5978
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 5979
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 5980
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5981
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5982
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5983
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5984
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5985
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5986
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5987
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5988
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5989
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5990
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 5991
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 5992
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5993
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 5994
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 5995
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 5996
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5997
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 5998
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 5999
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6000
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6001
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6002
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6003
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6004
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6005
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6006
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6007
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6008
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 6009
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 6010
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 6011
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 6012
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 6013
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 6014
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 6015
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 6016
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 6017
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 6018
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 6019
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 6020
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 6021
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 6022
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 6023
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 6024
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 6025
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_7;
lowp vec3 t10_7;
bool tb7;
mediump vec3 t16_9;
mediump float t16_18;
void main()
{
    //Instruction 5915
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 5916
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.5, 0.5);
    //Instruction 5917
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 5918
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 5919
    //MOVC
    t10_2 = (tb7) ? 1.0 : 0.0;
    //Instruction 5920
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 5921
    //DP3
    t16_1 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 5922
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 5923
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 5924
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 5925
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 5926
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 5927
    //MUL
    t16_3.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 5928
    //DP3
    t16_18 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 5929
    //ADD
    t16_18 = t16_18 + t16_18;
    //Instruction 5930
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_18)) + (-vs_TEXCOORD1.xyz);
    //Instruction 5931
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 5932
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 5933
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 5934
    //DP3
    t16_18 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 5935
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 5936
    //MUL
    t16_18 = t16_18 * t16_18;
    //Instruction 5937
    //MUL
    t16_4.x = t16_18 * t16_18;
    //Instruction 5938
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 5939
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 5940
    //MUL
    t16_1 = t10_1 * 16.0;
    //Instruction 5941
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 5942
    //MAD
    t16_9.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 5943
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 5944
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 5945
    //MUL
    t16_9.xyz = vec3(t16_1) * t16_9.xyz;
    //Instruction 5946
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 5947
    //MAD
    t16_9.xyz = t16_7.xyz * vec3(t16_18) + t16_9.xyz;
    //Instruction 5948
    //MUL
    t16_0.xyz = t16_0.xyz * t16_9.xyz;
    //Instruction 5949
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_0.xyz;
    //Instruction 5950
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5951
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTextureB0, vec2(tmpvar_5));
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_8;
  atten_8 = (tmpvar_6.w * tmpvar_7.w);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  mediump vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_1, viewDir_10) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_1, viewDir_10), 0.0, 1.0));
  mediump vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_NHxRoughness, tmpvar_12);
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_13.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_9) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3738
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3739
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3740
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3741
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3742
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3743
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3744
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3745
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3746
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3747
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3748
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3749
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3750
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3751
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3752
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3753
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3754
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3755
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 3756
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3757
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 3758
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 3759
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3760
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 3761
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 3762
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3763
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3764
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3765
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3766
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3767
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3768
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3769
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3770
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3771
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3772
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3773
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3774
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3775
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3776
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3777
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3778
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3779
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3780
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 3781
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 3782
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 3783
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3784
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 3785
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 3786
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3787
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3788
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3789
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3790
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3791
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3792
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3793
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3794
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3795
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3796
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3797
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3798
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3799
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3800
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3801
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3802
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3803
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3804
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3805
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
lowp vec3 t10_5;
mediump vec3 t16_7;
mediump float t16_16;
void main()
{
    //Instruction 3706
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3707
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 3708
    //SAMPLE
    t10_5.x = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 3709
    //MUL
    t16_0 = t10_5.x * t10_0;
    //Instruction 3710
    //MUL
    t16_1.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 3711
    //DP3
    t16_16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3712
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3713
    //MUL
    t16_2.xyz = vec3(t16_16) * vs_TEXCOORD4.xyz;
    //Instruction 3714
    //DP3
    t16_16 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 3715
    //ADD
    t16_16 = t16_16 + t16_16;
    //Instruction 3716
    //MAD
    t16_3.xyz = t16_2.xyz * (-vec3(t16_16)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3717
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 3718
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 3719
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 3720
    //DP3
    t16_16 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 3721
    //DP3
    t16_2.x = dot(t16_2.xyz, t16_4.xyz);
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 3722
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 3723
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 3724
    //ADD
    t16_3.y = (-_Glossiness) + 1.0;
    //Instruction 3725
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_3.xy).w;
    //Instruction 3726
    //MUL
    t16_0 = t10_0 * 16.0;
    //Instruction 3727
    //SAMPLE
    t10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3728
    //MAD
    t16_7.xyz = _Color.xyz * t10_5.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3729
    //MUL
    t16_5.xyz = t10_5.xyz * _Color.xyz;
    //Instruction 3730
    //MAD
    t16_7.xyz = vec3(_Metallic) * t16_7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3731
    //MUL
    t16_7.xyz = vec3(t16_0) * t16_7.xyz;
    //Instruction 3732
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3733
    //MAD
    t16_7.xyz = t16_5.xyz * vec3(t16_16) + t16_7.xyz;
    //Instruction 3734
    //MUL
    t16_1.xyz = t16_1.xyz * t16_7.xyz;
    //Instruction 3735
    //MUL
    SV_Target0.xyz = t16_2.xxx * t16_1.xyz;
    //Instruction 3736
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3737
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_6;
  atten_6 = tmpvar_5.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _LightColor0.xyz;
  tmpvar_7 = (tmpvar_7 * atten_6);
  mediump vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_9;
  tmpvar_9.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_1, viewDir_8) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_9.y = (1.0 - clamp (dot (tmpvar_1, viewDir_8), 0.0, 1.0));
  mediump vec2 tmpvar_10;
  tmpvar_10.x = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9)).x;
  tmpvar_10.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_NHxRoughness, tmpvar_10);
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_11.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_7) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 6055
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6056
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6057
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6058
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6059
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6060
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6061
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6062
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6063
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6064
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6065
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6066
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6067
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6068
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6069
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 6070
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 6071
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 6072
    //MOV
    t1.w = t0.x;
    //Instruction 6073
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6074
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 6075
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 6076
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6077
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6078
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 6079
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 6080
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6081
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6082
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6083
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6084
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6085
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6086
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6087
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6088
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6089
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6090
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6091
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6092
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6093
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 6094
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 6095
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 6096
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 6097
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 6098
    //MOV
    t2.w = t0.z;
    //Instruction 6099
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 6100
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6101
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 6102
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 6103
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 6104
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 6105
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 6106
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 6107
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 6108
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 6109
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 6110
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 6111
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 6112
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 6113
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 6114
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 6026
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6027
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 6028
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 6029
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 6030
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 6031
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6032
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 6033
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 6034
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 6035
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 6036
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 6037
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 6038
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 6039
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 6040
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 6041
    //MUL
    t16_3 = t10_3 * 16.0;
    //Instruction 6042
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6043
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6044
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 6045
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6046
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 6047
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6048
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 6049
    //SAMPLE
    t10_3 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 6050
    //MUL
    t16_1.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 6051
    //MUL
    t16_4.xyz = t16_4.xyz * t16_1.xyz;
    //Instruction 6052
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 6053
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6054
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_14;
  texcoord_14.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_15;
  if ((_UVSec == 0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_16;
  n_16 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  highp vec3 dir_22;
  dir_22 = tmpvar_4.xyz;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = tmpvar_4.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = tmpvar_24.www;
  mediump vec3 normal_26;
  normal_26 = tmpvar_21;
  mediump vec3 tangent_27;
  tangent_27 = tmpvar_24.xyz;
  mediump vec3 flip_28;
  flip_28 = tmpvar_25;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * flip_28);
  mediump mat3 tmpvar_30;
  tmpvar_30[0].x = tangent_27.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = normal_26.x;
  tmpvar_30[1].x = tangent_27.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = normal_26.y;
  tmpvar_30[2].x = tangent_27.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = normal_26.z;
  tangentToWorld_6 = tmpvar_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].x;
  v_31.y = tangentToWorld_6[1].x;
  v_31.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].y;
  v_32.y = tangentToWorld_6[1].y;
  v_32.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_32;
  highp vec3 v_33;
  v_33.x = tangentToWorld_6[0].z;
  v_33.y = tangentToWorld_6[1].z;
  v_33.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (_Object2World * _glesVertex);
  tmpvar_11 = (_LightMatrix0 * tmpvar_34);
  tmpvar_12 = (unity_World2Shadow[0] * tmpvar_34);
  highp vec3 tmpvar_35;
  tmpvar_35 = (_WorldSpaceLightPos0.xyz - (tmpvar_13.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_36;
  n_36 = tmpvar_35;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(n_36);
  lightDir_5 = tmpvar_37;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_14;
  xlv_TEXCOORD1 = normalize(n_16);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_7;
  mediump vec2 P_8;
  P_8 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_7 = texture2D (_LightTexture0, P_8);
  highp vec3 LightCoord_9;
  LightCoord_9 = xlv_TEXCOORD5.xyz;
  highp float tmpvar_10;
  tmpvar_10 = dot (LightCoord_9, LightCoord_9);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(tmpvar_10));
  lowp float tmpvar_12;
  highp vec4 shadowCoord_13;
  shadowCoord_13 = xlv_TEXCOORD6;
  highp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_ShadowMapTexture, shadowCoord_13);
  mediump float tmpvar_15;
  if ((tmpvar_14.x < (shadowCoord_13.z / shadowCoord_13.w))) {
    tmpvar_15 = _LightShadowData.x;
  } else {
    tmpvar_15 = 1.0;
  };
  tmpvar_12 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_16 = (tmpvar_16 * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * tmpvar_7.w)
   * tmpvar_11.w) * tmpvar_12));
  mediump vec3 viewDir_17;
  viewDir_17 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_18;
  tmpvar_18.x = dot ((viewDir_17 - (2.0 * 
    (dot (tmpvar_1, viewDir_17) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_18.y = (1.0 - clamp (dot (tmpvar_1, viewDir_17), 0.0, 1.0));
  mediump vec2 tmpvar_19;
  tmpvar_19.x = ((tmpvar_18 * tmpvar_18) * (tmpvar_18 * tmpvar_18)).x;
  tmpvar_19.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_NHxRoughness, tmpvar_19);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((tmpvar_4 + 
    ((tmpvar_20.w * 16.0) * tmpvar_5)
  ) * tmpvar_16) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  mediump vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = tmpvar_21.xyz;
  xlat_varoutput_22.w = 1.0;
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_14;
  texcoord_14.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_15;
  if ((_UVSec == 0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_16;
  n_16 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  highp vec3 dir_22;
  dir_22 = tmpvar_4.xyz;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = tmpvar_4.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = tmpvar_24.www;
  mediump vec3 normal_26;
  normal_26 = tmpvar_21;
  mediump vec3 tangent_27;
  tangent_27 = tmpvar_24.xyz;
  mediump vec3 flip_28;
  flip_28 = tmpvar_25;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * flip_28);
  mediump mat3 tmpvar_30;
  tmpvar_30[0].x = tangent_27.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = normal_26.x;
  tmpvar_30[1].x = tangent_27.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = normal_26.y;
  tmpvar_30[2].x = tangent_27.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = normal_26.z;
  tangentToWorld_6 = tmpvar_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].x;
  v_31.y = tangentToWorld_6[1].x;
  v_31.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].y;
  v_32.y = tangentToWorld_6[1].y;
  v_32.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_32;
  highp vec3 v_33;
  v_33.x = tangentToWorld_6[0].z;
  v_33.y = tangentToWorld_6[1].z;
  v_33.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (_Object2World * _glesVertex);
  tmpvar_11 = (_LightMatrix0 * tmpvar_34);
  tmpvar_12 = (unity_World2Shadow[0] * tmpvar_34);
  highp vec3 tmpvar_35;
  tmpvar_35 = (_WorldSpaceLightPos0.xyz - (tmpvar_13.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_36;
  n_36 = tmpvar_35;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(n_36);
  lightDir_5 = tmpvar_37;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_14;
  xlv_TEXCOORD1 = normalize(n_16);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  mediump vec2 P_6;
  P_6 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  lowp float tmpvar_9;
  highp vec4 shadowCoord_10;
  shadowCoord_10 = xlv_TEXCOORD6;
  mediump float shadow_11;
  lowp float tmpvar_12;
  tmpvar_12 = shadow2DProjEXT (_ShadowMapTexture, shadowCoord_10);
  mediump float tmpvar_13;
  tmpvar_13 = tmpvar_12;
  shadow_11 = (_LightShadowData.x + (tmpvar_13 * (1.0 - _LightShadowData.x)));
  tmpvar_9 = shadow_11;
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_14 = (tmpvar_14 * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * tmpvar_5.w)
   * tmpvar_8.w) * tmpvar_9));
  mediump vec3 viewDir_15;
  viewDir_15 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_15 - (2.0 * 
    (dot (tmpvar_1, viewDir_15) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_1, viewDir_15), 0.0, 1.0));
  mediump vec2 tmpvar_17;
  tmpvar_17.x = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16)).x;
  tmpvar_17.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_NHxRoughness, tmpvar_17);
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_18.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_14) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = 1.0;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 6157
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6158
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6159
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6160
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6161
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6162
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6163
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6164
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6165
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6166
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6167
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6168
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6169
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6170
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6171
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6172
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6173
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6174
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 6175
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6176
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 6177
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 6178
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6179
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 6180
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 6181
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 6182
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6183
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 6184
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 6185
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6186
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6187
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6188
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6189
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6190
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6191
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6192
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6193
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6194
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6195
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6196
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 6197
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6198
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6199
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6200
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6201
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6202
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6203
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6204
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6205
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6206
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6207
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6208
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6209
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6210
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6211
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6212
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6213
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 6214
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 6215
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 6216
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 6217
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 6218
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 6219
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 6220
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 6221
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 6222
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 6223
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 6224
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 6225
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 6226
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 6227
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 6228
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 6229
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 6230
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 6231
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 6232
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 6233
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 6234
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 6235
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_7;
lowp vec3 t10_7;
bool tb7;
mediump vec3 t16_9;
mediump float t16_18;
void main()
{
    //Instruction 6115
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 6116
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.5, 0.5);
    //Instruction 6117
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 6118
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 6119
    //MOVC
    t10_2 = (tb7) ? 1.0 : 0.0;
    //Instruction 6120
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 6121
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 6122
    //SAMPLE
    t10_1 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 6123
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 6124
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 6125
    //SAMPLE_C_LZ
    vec3 txVec19 = vec3(t16_1.xy,t16_1.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec19, 0.0);
    //Instruction 6126
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 6127
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 6128
    //MUL
    t10_2 = t16_0.x * t10_2;
    //Instruction 6129
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 6130
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6131
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 6132
    //MUL
    t16_3.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 6133
    //DP3
    t16_18 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 6134
    //ADD
    t16_18 = t16_18 + t16_18;
    //Instruction 6135
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_18)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6136
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 6137
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 6138
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 6139
    //DP3
    t16_18 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 6140
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 6141
    //MUL
    t16_18 = t16_18 * t16_18;
    //Instruction 6142
    //MUL
    t16_4.x = t16_18 * t16_18;
    //Instruction 6143
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 6144
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 6145
    //MUL
    t16_1.x = t10_1 * 16.0;
    //Instruction 6146
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6147
    //MAD
    t16_9.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6148
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 6149
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6150
    //MUL
    t16_9.xyz = t16_1.xxx * t16_9.xyz;
    //Instruction 6151
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6152
    //MAD
    t16_9.xyz = t16_7.xyz * vec3(t16_18) + t16_9.xyz;
    //Instruction 6153
    //MUL
    t16_0.xyz = t16_0.xyz * t16_9.xyz;
    //Instruction 6154
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_0.xyz;
    //Instruction 6155
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6156
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_32.x;
  tmpvar_8.w = tmpvar_32.y;
  tmpvar_9.w = tmpvar_32.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp float tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_5 = tmpvar_6;
  mediump float atten_7;
  atten_7 = tmpvar_5;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (_Object2World * _glesVertex);
  tmpvar_10 = (unity_World2Shadow[0] * tmpvar_32);
  highp vec3 tmpvar_33;
  tmpvar_33 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_33.x;
  tmpvar_8.w = tmpvar_33.y;
  tmpvar_9.w = tmpvar_33.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_32).xy;
  xlv_TEXCOORD6 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  lowp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_6 = tmpvar_7;
  mediump float atten_8;
  atten_8 = (tmpvar_5.w * tmpvar_6);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  mediump vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_1, viewDir_10) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_1, viewDir_10), 0.0, 1.0));
  mediump vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_NHxRoughness, tmpvar_12);
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_13.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_9) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  highp vec4 tmpvar_35;
  tmpvar_35 = (_Object2World * _glesVertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_35).xyz;
  xlv_TEXCOORD6 = (tmpvar_35.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, vec2(tmpvar_7));
  highp float mydist_9;
  mydist_9 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_10;
  tmpvar_10 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD6), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_11;
  if ((tmpvar_10 < mydist_9)) {
    tmpvar_11 = _LightShadowData.x;
  } else {
    tmpvar_11 = 1.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  tmpvar_12 = (tmpvar_12 * (tmpvar_8.w * tmpvar_11));
  mediump vec3 viewDir_13;
  viewDir_13 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_13 - (2.0 * 
    (dot (tmpvar_1, viewDir_13) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_1, viewDir_13), 0.0, 1.0));
  mediump vec2 tmpvar_15;
  tmpvar_15.x = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14)).x;
  tmpvar_15.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_NHxRoughness, tmpvar_15);
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = (((tmpvar_4 + 
    ((tmpvar_16.w * 16.0) * tmpvar_5)
  ) * tmpvar_12) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  mediump vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = tmpvar_17.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 6275
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6276
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6277
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6278
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6279
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6280
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6281
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6282
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6283
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6284
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6285
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6286
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6287
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6288
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6289
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6290
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6291
    //MAD
    t1.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6292
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 6293
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6294
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6295
    //MUL
    t16_2.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6296
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 6297
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6298
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 6299
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 6300
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 6301
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6302
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 6303
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 6304
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6305
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6306
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6307
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6308
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6309
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6310
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6311
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6312
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6313
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6314
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6315
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 6316
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6317
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6318
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6319
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6320
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6321
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6322
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6323
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6324
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6325
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6326
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6327
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6328
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6329
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6330
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6331
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6332
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 6333
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 6334
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 6335
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 6336
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 6337
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 6338
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 6339
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 6340
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 6341
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 6342
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 6343
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_9;
mediump float t16_20;
void main()
{
    //Instruction 6236
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 6237
    //SQRT
    t0 = sqrt(t0);
    //Instruction 6238
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 6239
    //MUL
    t0 = t0 * 0.970000029;
    //Instruction 6240
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 6241
    //DP4
    t6 = dot(t1, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 6242
    //LT
    tb0 = t6<t0;
    //Instruction 6243
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 6244
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 6245
    //SAMPLE
    t10_0 = texture(_LightTexture0, vec2(t0)).w;
    //Instruction 6246
    //MUL
    t16_0 = t16_2.x * t10_0;
    //Instruction 6247
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 6248
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6249
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 6250
    //MUL
    t16_3.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 6251
    //DP3
    t16_20 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 6252
    //ADD
    t16_20 = t16_20 + t16_20;
    //Instruction 6253
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_20)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6254
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 6255
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 6256
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 6257
    //DP3
    t16_20 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 6258
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 6259
    //MUL
    t16_20 = t16_20 * t16_20;
    //Instruction 6260
    //MUL
    t16_4.x = t16_20 * t16_20;
    //Instruction 6261
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 6262
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 6263
    //MUL
    t16_0 = t10_0 * 16.0;
    //Instruction 6264
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6265
    //MAD
    t16_9.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6266
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 6267
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6268
    //MUL
    t16_9.xyz = vec3(t16_0) * t16_9.xyz;
    //Instruction 6269
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6270
    //MAD
    t16_9.xyz = t16_6.xyz * vec3(t16_20) + t16_9.xyz;
    //Instruction 6271
    //MUL
    t16_2.xyz = t16_2.xyz * t16_9.xyz;
    //Instruction 6272
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_2.xyz;
    //Instruction 6273
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6274
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  highp vec4 tmpvar_35;
  tmpvar_35 = (_Object2World * _glesVertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_35).xyz;
  xlv_TEXCOORD6 = (tmpvar_35.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  highp float mydist_10;
  mydist_10 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_11;
  tmpvar_11 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD6), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_12;
  if ((tmpvar_11 < mydist_10)) {
    tmpvar_12 = _LightShadowData.x;
  } else {
    tmpvar_12 = 1.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  tmpvar_13 = (tmpvar_13 * ((tmpvar_8.w * tmpvar_9.w) * tmpvar_12));
  mediump vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_1, viewDir_14) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_15.y = (1.0 - clamp (dot (tmpvar_1, viewDir_14), 0.0, 1.0));
  mediump vec2 tmpvar_16;
  tmpvar_16.x = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15)).x;
  tmpvar_16.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_NHxRoughness, tmpvar_16);
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = (((tmpvar_4 + 
    ((tmpvar_17.w * 16.0) * tmpvar_5)
  ) * tmpvar_13) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  mediump vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = tmpvar_18.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 6385
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6386
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6387
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6388
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6389
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6390
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6391
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6392
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6393
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6394
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6395
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6396
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6397
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6398
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6399
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6400
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6401
    //MAD
    t1.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6402
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 6403
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 6404
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 6405
    //MUL
    t16_2.xyz = t1.xyz * t16_2.xxx;
    //Instruction 6406
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 6407
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6408
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 6409
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 6410
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 6411
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6412
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 6413
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 6414
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6415
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6416
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6417
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6418
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6419
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6420
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6421
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6422
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6423
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6424
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 6425
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 6426
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6427
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 6428
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 6429
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 6430
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6431
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 6432
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 6433
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 6434
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6435
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6436
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6437
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6438
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6439
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6440
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6441
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6442
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 6443
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 6444
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 6445
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 6446
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 6447
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 6448
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 6449
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 6450
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 6451
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 6452
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 6453
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_9;
mediump float t16_20;
void main()
{
    //Instruction 6344
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 6345
    //SQRT
    t0 = sqrt(t0);
    //Instruction 6346
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 6347
    //MUL
    t0 = t0 * 0.970000029;
    //Instruction 6348
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 6349
    //DP4
    t6 = dot(t1, vec4(1.0, 0.00392156886, 1.53787005e-005, 6.03086292e-008));
    //Instruction 6350
    //LT
    tb0 = t6<t0;
    //Instruction 6351
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 6352
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 6353
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 6354
    //SAMPLE
    t10_6.x = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 6355
    //MUL
    t16_0 = t10_6.x * t10_0;
    //Instruction 6356
    //MUL
    t16_0 = t16_2.x * t16_0;
    //Instruction 6357
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 6358
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6359
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 6360
    //MUL
    t16_3.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 6361
    //DP3
    t16_20 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 6362
    //ADD
    t16_20 = t16_20 + t16_20;
    //Instruction 6363
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_20)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6364
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 6365
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 6366
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 6367
    //DP3
    t16_20 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 6368
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 6369
    //MUL
    t16_20 = t16_20 * t16_20;
    //Instruction 6370
    //MUL
    t16_4.x = t16_20 * t16_20;
    //Instruction 6371
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 6372
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 6373
    //MUL
    t16_0 = t10_0 * 16.0;
    //Instruction 6374
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6375
    //MAD
    t16_9.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6376
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 6377
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6378
    //MUL
    t16_9.xyz = vec3(t16_0) * t16_9.xyz;
    //Instruction 6379
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6380
    //MAD
    t16_9.xyz = t16_6.xyz * vec3(t16_20) + t16_9.xyz;
    //Instruction 6381
    //MUL
    t16_2.xyz = t16_2.xyz * t16_9.xyz;
    //Instruction 6382
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_2.xyz;
    //Instruction 6383
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6384
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_32.x;
  tmpvar_8.w = tmpvar_32.y;
  tmpvar_9.w = tmpvar_32.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp float shadow_5;
  shadow_5 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  mediump float atten_6;
  atten_6 = shadow_5;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _LightColor0.xyz;
  tmpvar_7 = (tmpvar_7 * atten_6);
  mediump vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_9;
  tmpvar_9.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_1, viewDir_8) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_9.y = (1.0 - clamp (dot (tmpvar_1, viewDir_8), 0.0, 1.0));
  mediump vec2 tmpvar_10;
  tmpvar_10.x = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9)).x;
  tmpvar_10.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_NHxRoughness, tmpvar_10);
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_11.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_7) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 3837
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3838
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3839
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3840
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3841
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3842
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3843
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3844
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3845
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3846
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3847
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3848
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3849
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3850
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3851
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 3852
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 3853
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 3854
    //MOV
    t1.w = t0.x;
    //Instruction 3855
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3856
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 3857
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 3858
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3859
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3860
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 3861
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3862
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3863
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3864
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3865
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3866
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3867
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3868
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3869
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3870
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3871
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3872
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3873
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3874
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3875
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 3876
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 3877
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 3878
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 3879
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3880
    //MOV
    t2.w = t0.z;
    //Instruction 3881
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3882
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3883
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3884
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3885
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3886
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3887
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3888
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3889
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3890
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3891
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
lowp vec3 t10_9;
mediump float t16_15;
void main()
{
    //Instruction 3806
    //SAMPLE_C_LZ
    vec3 txVec19 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec19, 0.0);
    //Instruction 3807
    //ADD
    t16_5 = (-_LightShadowData.x) + 1.0;
    //Instruction 3808
    //MAD
    t16_0.x = t16_0.x * t16_5 + _LightShadowData.x;
    //Instruction 3809
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3810
    //DP3
    t16_15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3811
    //RSQ
    t16_15 = inversesqrt(t16_15);
    //Instruction 3812
    //MUL
    t16_1.xyz = vec3(t16_15) * vs_TEXCOORD4.xyz;
    //Instruction 3813
    //DP3
    t16_15 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 3814
    //ADD
    t16_15 = t16_15 + t16_15;
    //Instruction 3815
    //MAD
    t16_2.xyz = t16_1.xyz * (-vec3(t16_15)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3816
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 3817
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 3818
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 3819
    //DP3
    t16_15 = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3820
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_3.xyz);
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    //Instruction 3821
    //MUL
    t16_15 = t16_15 * t16_15;
    //Instruction 3822
    //MUL
    t16_2.x = t16_15 * t16_15;
    //Instruction 3823
    //ADD
    t16_2.y = (-_Glossiness) + 1.0;
    //Instruction 3824
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.xy).w;
    //Instruction 3825
    //MUL
    t16_4 = t10_4 * 16.0;
    //Instruction 3826
    //SAMPLE
    t10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3827
    //MAD
    t16_6.xyz = _Color.xyz * t10_9.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3828
    //MUL
    t16_9.xyz = t10_9.xyz * _Color.xyz;
    //Instruction 3829
    //MAD
    t16_6.xyz = vec3(_Metallic) * t16_6.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3830
    //MUL
    t16_6.xyz = t16_6.xyz * vec3(t16_4);
    //Instruction 3831
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3832
    //MAD
    t16_6.xyz = t16_9.xyz * vec3(t16_15) + t16_6.xyz;
    //Instruction 3833
    //MUL
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    //Instruction 3834
    //MUL
    SV_Target0.xyz = t16_1.xxx * t16_0.xyz;
    //Instruction 3835
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3836
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec2 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (_Object2World * _glesVertex);
  tmpvar_10 = (_LightMatrix0 * tmpvar_33).xy;
  tmpvar_11 = (unity_World2Shadow[0] * tmpvar_33);
  highp vec3 tmpvar_34;
  tmpvar_34 = (_WorldSpaceLightPos0.xyz - (tmpvar_12.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_34.x;
  tmpvar_8.w = tmpvar_34.y;
  tmpvar_9.w = tmpvar_34.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  lowp float shadow_6;
  shadow_6 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump float atten_7;
  atten_7 = (tmpvar_5.w * shadow_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 6487
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6488
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 6489
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 6490
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6491
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 6492
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 6493
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 6494
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 6495
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6496
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 6497
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 6498
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6499
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 6500
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6501
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 6502
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 6503
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 6504
    //MOV
    t1.w = t0.x;
    //Instruction 6505
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 6506
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 6507
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 6508
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6509
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6510
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 6511
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 6512
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6513
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6514
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6515
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6516
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6517
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6518
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6519
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6520
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6521
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6522
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 6523
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6524
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 6525
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 6526
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 6527
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 6528
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 6529
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 6530
    //MOV
    t2.w = t0.z;
    //Instruction 6531
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 6532
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 6533
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 6534
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 6535
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 6536
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 6537
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 6538
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 6539
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 6540
    //DP4
    t3.x = dot(t16_0, t1);
    //Instruction 6541
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 6542
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 6543
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 6544
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 6545
    //DP4
    t3.y = dot(t16_0, t1);
    //Instruction 6546
    //MOV
    vs_TEXCOORD5.xy = t3.xy;
    //Instruction 6547
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 6548
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 6549
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 6550
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 6551
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 6552
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump float t16_15;
void main()
{
    //Instruction 6454
    //SAMPLE_C_LZ
    vec3 txVec20 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec20, 0.0);
    //Instruction 6455
    //ADD
    t16_5 = (-_LightShadowData.x) + 1.0;
    //Instruction 6456
    //MAD
    t16_0.x = t16_0.x * t16_5 + _LightShadowData.x;
    //Instruction 6457
    //SAMPLE
    t10_1 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 6458
    //MUL
    t16_1 = t16_0.x * t10_1;
    //Instruction 6459
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 6460
    //DP3
    t16_15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 6461
    //RSQ
    t16_15 = inversesqrt(t16_15);
    //Instruction 6462
    //MUL
    t16_2.xyz = vec3(t16_15) * vs_TEXCOORD4.xyz;
    //Instruction 6463
    //DP3
    t16_15 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 6464
    //ADD
    t16_15 = t16_15 + t16_15;
    //Instruction 6465
    //MAD
    t16_3.xyz = t16_2.xyz * (-vec3(t16_15)) + (-vs_TEXCOORD1.xyz);
    //Instruction 6466
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 6467
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 6468
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 6469
    //DP3
    t16_15 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 6470
    //DP3
    t16_2.x = dot(t16_2.xyz, t16_4.xyz);
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 6471
    //MUL
    t16_15 = t16_15 * t16_15;
    //Instruction 6472
    //MUL
    t16_3.x = t16_15 * t16_15;
    //Instruction 6473
    //ADD
    t16_3.y = (-_Glossiness) + 1.0;
    //Instruction 6474
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_3.xy).w;
    //Instruction 6475
    //MUL
    t16_1 = t10_1 * 16.0;
    //Instruction 6476
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 6477
    //MAD
    t16_7.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 6478
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 6479
    //MAD
    t16_7.xyz = vec3(_Metallic) * t16_7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 6480
    //MUL
    t16_7.xyz = vec3(t16_1) * t16_7.xyz;
    //Instruction 6481
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 6482
    //MAD
    t16_7.xyz = t16_6.xyz * vec3(t16_15) + t16_7.xyz;
    //Instruction 6483
    //MUL
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    //Instruction 6484
    //MUL
    SV_Target0.xyz = t16_2.xxx * t16_0.xyz;
    //Instruction 6485
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6486
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 502614
Program "vp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec3 vertex_1;
  vertex_1 = _glesVertex.xyz;
  highp vec4 clipPos_2;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    highp vec3 tmpvar_4;
    tmpvar_4 = (_Object2World * tmpvar_3).xyz;
    highp vec4 v_5;
    v_5.x = _World2Object[0].x;
    v_5.y = _World2Object[1].x;
    v_5.z = _World2Object[2].x;
    v_5.w = _World2Object[3].x;
    highp vec4 v_6;
    v_6.x = _World2Object[0].y;
    v_6.y = _World2Object[1].y;
    v_6.z = _World2Object[2].y;
    v_6.w = _World2Object[3].y;
    highp vec4 v_7;
    v_7.x = _World2Object[0].z;
    v_7.y = _World2Object[1].z;
    v_7.z = _World2Object[2].z;
    v_7.w = _World2Object[3].z;
    highp vec3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * _glesNormal.x)
     + 
      (v_6.xyz * _glesNormal.y)
    ) + (v_7.xyz * _glesNormal.z)));
    highp float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (unity_MatrixVP * tmpvar_10);
  } else {
    highp vec4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (glstate_matrix_mvp * tmpvar_11);
  };
  highp vec4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, -(clipPos_2.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_12;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t6;
highp float t9;
void main()
{
    //Instruction 6555
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 6556
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 6557
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 6558
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 6559
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 6560
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 6561
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 6562
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 6563
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 6564
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 6565
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 6566
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 6567
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 6568
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 6569
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 6570
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 6571
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 6572
    //ADD
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 6573
    //MAD
    t2.xyz = (-t1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6574
    //DP3
    t9 = dot(t2.xyz, t2.xyz);
    //Instruction 6575
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 6576
    //MUL
    t2.xyz = vec3(t9) * t2.xyz;
    //Instruction 6577
    //DP3
    t9 = dot(t0.xyz, t2.xyz);
    //Instruction 6578
    //MAD
    t9 = (-t9) * t9 + 1.0;
    //Instruction 6579
    //SQRT
    t9 = sqrt(t9);
    //Instruction 6580
    //MUL
    t9 = t9 * unity_LightShadowBias.z;
    //Instruction 6581
    //MAD
    t0.xyz = (-t0.xyz) * vec3(t9) + t1.xyz;
    //Instruction 6582
    //MUL
    t1 = t0.yyyy * unity_MatrixVP[1];
    //Instruction 6583
    //MAD
    t1 = unity_MatrixVP[0] * t0.xxxx + t1;
    //Instruction 6584
    //MAD
    t0 = unity_MatrixVP[2] * t0.zzzz + t1;
    //Instruction 6585
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 6586
    //MUL
    t1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6587
    //MAD
    t1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t1;
    //Instruction 6588
    //MAD
    t1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t1;
    //Instruction 6589
    //ADD
    t1 = t1 + glstate_matrix_mvp[3];
    //Instruction 6590
    //NE
    tb2 = unity_LightShadowBias.z!=0.0;
    //Instruction 6591
    //MOVC
    t0 = (bool(tb2)) ? t0 : t1;
    //Instruction 6592
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 6593
    //ADD
    t6 = t0.z + t1.x;
    //Instruction 6594
    //MAX
    t1.x = max((-t0.w), t6);
    //Instruction 6595
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 6596
    //ADD
    t0.x = (-t6) + t1.x;
    //Instruction 6597
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t0.x + t6;
    //Instruction 6598
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    //Instruction 6553
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6554
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  xlv_TEXCOORD0 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec4 enc_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  enc_2 = (tmpvar_3 - (tmpvar_3.yzww * 0.003921569));
  tmpvar_1 = enc_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
void main()
{
    //Instruction 3901
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3902
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3903
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3904
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3905
    //ADD
    vs_TEXCOORD0.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 3906
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3907
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3908
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3909
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3910
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 3892
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 3893
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3894
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 3895
    //MIN
    t0.x = min(t0.x, 0.999000013);
    //Instruction 3896
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    //Instruction 3897
    //FRC
    t0 = fract(t0);
    //Instruction 3898
    //MAD
    t0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    //Instruction 3899
    //MOV
    SV_Target0 = t0;
    //Instruction 3900
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3"
}
}
 }
}
Fallback "VertexLit"
}                              316975__mickleness__splash         Dђ     РI B             sharedassets0.resource          АЇ        
   Background             B   B           A   A   A   A  HC                 ЌћL=
„£=    
„£=
„£љ    
„£=ЪЩЩ=    )\Пљ
„£=    ЪЩЩљ
„£љ    
„£љ)\П=    
„£љЌћLљ                          а$џ<p1R=nТ€Aќ-€Aа$џ<p1R=@     HC  АA  HC  АA       girl_normal   4B  lB  3C  VCЄОNЅ  А7                  »B                 ®Г?ЅхИ?    zЗ? Ањ    ®Г?„£љ    eў?ƒхИњ     DњЅхИ?     DњƒхИњ                        4B  lB  3C  VC        @     »B).уB  »B &C   tiger_normal  (B  ВB  8C  %C                          »B                 Еk?33S?    „£р>33Sњ    Еk?   Њ    ЃGбЊ33Sњ    ц(\њ\П¬љ    Еkњ33S?    ЕkњЃG?                              (B  ВB  8C  %C        @     »B  C  »B АC    
   dog_normal    B  |B  AC  6C                          »B              	   )\o?ЌћL?    =
w?бzФЊ    =
w?q=J?    q= >√хhњ    \ПВ>√хh?    ff¶Њ√хh?    )\ѕЊ√хhњ    =
wњЌћL?    =
wњ{ЃЊ                                   B  |B  AC  6C        @     »B АC  »B  C   panda_normal  0B  xB  4C  &C                          »B                 fff?бzT?    =
„>бzTњ    fff?ЪЩЊ       њбzTњ    RЄ^њбzФЊ    
„cњбzT?    fffњЌћL?    fffњЪЩЊ                               0B  xB  4C  &C        @     »B  C  »B  C    
   man_normal    јA  tB  HC  ^C–Dлј@№M@                  »B       	          јкЬЊaо’>    O≠ТЊHТ<    ЕЦ≈љй0?    јкЬЊЯшђ>    †Кq?zцЙ?    'iЙ?OіЊ    'iЙ?zцЙ?    …ж@?|2Тњ    #k7њ|2Тњ    x	ҐЊЯшђ>    L«FњќкРњ    Й—]њzцЙ?    ≤-mњzцЙ?    ≤-mњW0ѓЊ    $     
  
  	 
   
 	   	                          јA  tB  HC  ^C        @     »B≥KйB  »Bq7/C